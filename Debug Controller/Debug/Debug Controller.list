
Debug Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006508  08006508  00007508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f8  080065f8  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  080065f8  080065f8  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065f8  080065f8  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006600  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008014  2**0
                  CONTENTS
 10 .bss          0000117c  20000014  20000014  00008014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001190  20001190  00008014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001260d  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d66  00000000  00000000  0001a651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0001d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc3  00000000  00000000  0001e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff7f  00000000  00000000  0001f34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a53  00000000  00000000  0003f2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5875  00000000  00000000  00054d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a592  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a1c  00000000  00000000  0011a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011eff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064f0 	.word	0x080064f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080064f0 	.word	0x080064f0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000030 	.word	0x20000030
 8000200:	20000084 	.word	0x20000084

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b096      	sub	sp, #88	@ 0x58
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f001 fad1 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f865 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f9b3 	bl	800057c <MX_GPIO_Init>
  MX_CAN_Init();
 8000216:	f000 f97b 	bl	8000510 <MX_CAN_Init>
  MX_ADC2_Init();
 800021a:	f000 f8bd 	bl	8000398 <MX_ADC2_Init>
  MX_ADC4_Init();
 800021e:	f000 f919 	bl	8000454 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc2);
 8000222:	4824      	ldr	r0, [pc, #144]	@ (80002b4 <main+0xb0>)
 8000224:	f001 fcda 	bl	8001bdc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8000228:	4823      	ldr	r0, [pc, #140]	@ (80002b8 <main+0xb4>)
 800022a:	f001 fcd7 	bl	8001bdc <HAL_ADC_Start>

  CAN_Filter(&hcan, &CAN_TxHeader);
 800022e:	4923      	ldr	r1, [pc, #140]	@ (80002bc <main+0xb8>)
 8000230:	4823      	ldr	r0, [pc, #140]	@ (80002c0 <main+0xbc>)
 8000232:	f000 fb27 	bl	8000884 <CAN_Filter>
  HAL_CAN_Start(&hcan);
 8000236:	4822      	ldr	r0, [pc, #136]	@ (80002c0 <main+0xbc>)
 8000238:	f002 fc6f 	bl	8002b1a <HAL_CAN_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 128);
 800023c:	4b21      	ldr	r3, [pc, #132]	@ (80002c4 <main+0xc0>)
 800023e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000250:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 feed 	bl	8005036 <osThreadCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a1a      	ldr	r2, [pc, #104]	@ (80002c8 <main+0xc4>)
 8000260:	6013      	str	r3, [r2, #0]

  /* definition and creation of InputPoll */
  osThreadDef(InputPoll, StartInputPoll, osPriorityNormal, 0, 128);
 8000262:	4b1a      	ldr	r3, [pc, #104]	@ (80002cc <main+0xc8>)
 8000264:	f107 0420 	add.w	r4, r7, #32
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputPollHandle = osThreadCreate(osThread(InputPoll), NULL);
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f004 feda 	bl	8005036 <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <main+0xcc>)
 8000286:	6013      	str	r3, [r2, #0]

  /* definition and creation of ManageCanBus */
  osThreadDef(ManageCanBus, StartManageCanBus, osPriorityNormal, 0, 128);
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <main+0xd0>)
 800028a:	1d3c      	adds	r4, r7, #4
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ManageCanBusHandle = osThreadCreate(osThread(ManageCanBus), NULL);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 fec9 	bl	8005036 <osThreadCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a0c      	ldr	r2, [pc, #48]	@ (80002d8 <main+0xd4>)
 80002a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002aa:	f004 febd 	bl	8005028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <main+0xaa>
 80002b2:	bf00      	nop
 80002b4:	20000284 	.word	0x20000284
 80002b8:	200002d4 	.word	0x200002d4
 80002bc:	20000380 	.word	0x20000380
 80002c0:	20000324 	.word	0x20000324
 80002c4:	08006514 	.word	0x08006514
 80002c8:	2000034c 	.word	0x2000034c
 80002cc:	0800653c 	.word	0x0800653c
 80002d0:	20000350 	.word	0x20000350
 80002d4:	08006568 	.word	0x08006568
 80002d8:	20000354 	.word	0x20000354

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b09e      	sub	sp, #120	@ 0x78
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f006 f8d4 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	223c      	movs	r2, #60	@ 0x3c
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f006 f8c6 	bl	8006498 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	2301      	movs	r3, #1
 800030e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000326:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000328:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800032c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000332:	4618      	mov	r0, r3
 8000334:	f002 ff92 	bl	800325c <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033e:	f001 f87b 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000356:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800035a:	2101      	movs	r1, #1
 800035c:	4618      	mov	r0, r3
 800035e:	f003 ffbb 	bl	80042d8 <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000368:	f001 f866 	bl	8001438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
 800036c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000370:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000376:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800037c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	4618      	mov	r0, r3
 8000382:	f004 f9d9 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800038c:	f001 f854 	bl	8001438 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3778      	adds	r7, #120	@ 0x78
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	463b      	mov	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ae:	4b27      	ldr	r3, [pc, #156]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003b0:	4a27      	ldr	r2, [pc, #156]	@ (8000450 <MX_ADC2_Init+0xb8>)
 80003b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b4:	4b25      	ldr	r3, [pc, #148]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003ba:	4b24      	ldr	r3, [pc, #144]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003c6:	4b21      	ldr	r3, [pc, #132]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003cc:	4b1f      	ldr	r3, [pc, #124]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b1c      	ldr	r3, [pc, #112]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003dc:	2201      	movs	r2, #1
 80003de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003e6:	4b19      	ldr	r3, [pc, #100]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_ADC2_Init+0xb4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000400:	4b12      	ldr	r3, [pc, #72]	@ (800044c <MX_ADC2_Init+0xb4>)
 8000402:	2200      	movs	r2, #0
 8000404:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000406:	4811      	ldr	r0, [pc, #68]	@ (800044c <MX_ADC2_Init+0xb4>)
 8000408:	f001 fa08 	bl	800181c <HAL_ADC_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000412:	f001 f811 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000416:	2304      	movs	r3, #4
 8000418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041a:	2301      	movs	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	4619      	mov	r1, r3
 8000432:	4806      	ldr	r0, [pc, #24]	@ (800044c <MX_ADC2_Init+0xb4>)
 8000434:	f001 fdf8 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800043e:	f000 fffb 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000284 	.word	0x20000284
 8000450:	50000100 	.word	0x50000100

08000454 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045a:	463b      	mov	r3, r7
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
 8000468:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800046a:	4b27      	ldr	r3, [pc, #156]	@ (8000508 <MX_ADC4_Init+0xb4>)
 800046c:	4a27      	ldr	r2, [pc, #156]	@ (800050c <MX_ADC4_Init+0xb8>)
 800046e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000470:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <MX_ADC4_Init+0xb4>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000476:	4b24      	ldr	r3, [pc, #144]	@ (8000508 <MX_ADC4_Init+0xb4>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800047c:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_ADC4_Init+0xb4>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000482:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <MX_ADC4_Init+0xb4>)
 8000484:	2201      	movs	r2, #1
 8000486:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000488:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_ADC4_Init+0xb4>)
 800048a:	2200      	movs	r2, #0
 800048c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_ADC4_Init+0xb4>)
 8000492:	2200      	movs	r2, #0
 8000494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_ADC4_Init+0xb4>)
 8000498:	2201      	movs	r2, #1
 800049a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_ADC4_Init+0xb4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80004a2:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004b2:	2204      	movs	r2, #4
 80004b4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80004c2:	4811      	ldr	r0, [pc, #68]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004c4:	f001 f9aa 	bl	800181c <HAL_ADC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80004ce:	f000 ffb3 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004d2:	2305      	movs	r3, #5
 80004d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	@ (8000508 <MX_ADC4_Init+0xb4>)
 80004f0:	f001 fd9a 	bl	8002028 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80004fa:	f000 ff9d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200002d4 	.word	0x200002d4
 800050c:	50000500 	.word	0x50000500

08000510 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_CAN_Init+0x64>)
 8000516:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <MX_CAN_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <MX_CAN_Init+0x64>)
 800051c:	2204      	movs	r2, #4
 800051e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_CAN_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_CAN_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_CAN_Init+0x64>)
 800052e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000532:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_CAN_Init+0x64>)
 8000536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800053a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_CAN_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_CAN_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <MX_CAN_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_CAN_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_CAN_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_CAN_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_CAN_Init+0x64>)
 8000562:	f002 f915 	bl	8002790 <HAL_CAN_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800056c:	f000 ff64 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000324 	.word	0x20000324
 8000578:	40006400 	.word	0x40006400

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	4b3b      	ldr	r3, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x104>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a3a      	ldr	r2, [pc, #232]	@ (8000680 <MX_GPIO_Init+0x104>)
 8000598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a34      	ldr	r2, [pc, #208]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a28      	ldr	r2, [pc, #160]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_GPIO_Init+0x104>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005f2:	2200      	movs	r2, #0
 80005f4:	217f      	movs	r1, #127	@ 0x7f
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f002 fe17 	bl	800322c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005fe:	2200      	movs	r2, #0
 8000600:	217f      	movs	r1, #127	@ 0x7f
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <MX_GPIO_Init+0x108>)
 8000604:	f002 fe12 	bl	800322c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000608:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000612:	2302      	movs	r3, #2
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <MX_GPIO_Init+0x10c>)
 800061e:	f002 fc73 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000622:	237f      	movs	r3, #127	@ 0x7f
 8000624:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f002 fc64 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000640:	237f      	movs	r3, #127	@ 0x7f
 8000642:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <MX_GPIO_Init+0x108>)
 8000658:	f002 fc56 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7
 800065c:	f44f 43e3 	mov.w	r3, #29056	@ 0x7180
 8000660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000666:	2302      	movs	r3, #2
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_GPIO_Init+0x108>)
 8000672:	f002 fc49 	bl	8002f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	48000400 	.word	0x48000400
 8000688:	48000800 	.word	0x48000800

0800068c <SetDisplay>:

/* USER CODE BEGIN 4 */

void SetDisplay(DISPLAY_SELECT select, uint8_t value){
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	uint8_t digits[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 800069c:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <SetDisplay+0x90>)
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a4:	c303      	stmia	r3!, {r0, r1}
 80006a6:	801a      	strh	r2, [r3, #0]
	GPIO_TypeDef* gpio;
	switch (select){
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <SetDisplay+0x28>
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d003      	beq.n	80006ba <SetDisplay+0x2e>
 80006b2:	e006      	b.n	80006c2 <SetDisplay+0x36>
	case (DISPLAY_LEFT):
		gpio = GPIOB;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <SetDisplay+0x94>)
 80006b6:	617b      	str	r3, [r7, #20]
		break;
 80006b8:	e003      	b.n	80006c2 <SetDisplay+0x36>
	case (DISPLAY_RIGHT):
		gpio = GPIOA;
 80006ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006be:	617b      	str	r3, [r7, #20]
		break;
 80006c0:	bf00      	nop
	}
	HAL_GPIO_WritePin(gpio, digits[8], GPIO_PIN_SET);
 80006c2:	7c3b      	ldrb	r3, [r7, #16]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	6978      	ldr	r0, [r7, #20]
 80006ca:	f002 fdaf 	bl	800322c <HAL_GPIO_WritePin>
	if (value == DISPLAY_NOTHING){
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2bff      	cmp	r3, #255	@ 0xff
 80006d2:	d01f      	beq.n	8000714 <SetDisplay+0x88>
	} else if (value == 11){
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b0b      	cmp	r3, #11
 80006d8:	d105      	bne.n	80006e6 <SetDisplay+0x5a>
		HAL_GPIO_WritePin(gpio, 0x49, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2149      	movs	r1, #73	@ 0x49
 80006de:	6978      	ldr	r0, [r7, #20]
 80006e0:	f002 fda4 	bl	800322c <HAL_GPIO_WritePin>
	} else if (value == 10){
		HAL_GPIO_WritePin(gpio, digits[8], GPIO_PIN_RESET);
	} else if (value < 10){
		HAL_GPIO_WritePin(gpio, digits[value], GPIO_PIN_RESET);
	}
}
 80006e4:	e016      	b.n	8000714 <SetDisplay+0x88>
	} else if (value == 10){
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	2b0a      	cmp	r3, #10
 80006ea:	d106      	bne.n	80006fa <SetDisplay+0x6e>
		HAL_GPIO_WritePin(gpio, digits[8], GPIO_PIN_RESET);
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	2200      	movs	r2, #0
 80006f0:	4619      	mov	r1, r3
 80006f2:	6978      	ldr	r0, [r7, #20]
 80006f4:	f002 fd9a 	bl	800322c <HAL_GPIO_WritePin>
}
 80006f8:	e00c      	b.n	8000714 <SetDisplay+0x88>
	} else if (value < 10){
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	d809      	bhi.n	8000714 <SetDisplay+0x88>
		HAL_GPIO_WritePin(gpio, digits[value], GPIO_PIN_RESET);
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	3318      	adds	r3, #24
 8000704:	443b      	add	r3, r7
 8000706:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	f002 fd8c 	bl	800322c <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08006584 	.word	0x08006584
 8000720:	48000400 	.word	0x48000400

08000724 <map>:

float map(float x,float minVal, float maxVal, float nMin, float nMax){
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	ed87 0a05 	vstr	s0, [r7, #20]
 800072e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000732:	ed87 1a03 	vstr	s2, [r7, #12]
 8000736:	edc7 1a02 	vstr	s3, [r7, #8]
 800073a:	ed87 2a01 	vstr	s4, [r7, #4]
	if (maxVal == minVal) return 0;
 800073e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000742:	edd7 7a04 	vldr	s15, [r7, #16]
 8000746:	eeb4 7a67 	vcmp.f32	s14, s15
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	d102      	bne.n	8000756 <map+0x32>
 8000750:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000798 <map+0x74>
 8000754:	e019      	b.n	800078a <map+0x66>
	return nMin + ((x - minVal) * (nMax - nMin)) / (maxVal - minVal);
 8000756:	ed97 7a05 	vldr	s14, [r7, #20]
 800075a:	edd7 7a04 	vldr	s15, [r7, #16]
 800075e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000762:	edd7 6a01 	vldr	s13, [r7, #4]
 8000766:	edd7 7a02 	vldr	s15, [r7, #8]
 800076a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800076e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000772:	ed97 7a03 	vldr	s14, [r7, #12]
 8000776:	edd7 7a04 	vldr	s15, [r7, #16]
 800077a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800077e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000782:	edd7 7a02 	vldr	s15, [r7, #8]
 8000786:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800078a:	eeb0 0a67 	vmov.f32	s0, s15
 800078e:	371c      	adds	r7, #28
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	00000000 	.word	0x00000000

0800079c <Debounce>:

bool Debounce(uint32_t* dTick, bool toCheck, uint32_t debounceSet){
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	460b      	mov	r3, r1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	72fb      	strb	r3, [r7, #11]
	if (*dTick > 0) (*dTick)--;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <Debounce+0x20>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
	if (toCheck == true){
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <Debounce+0x3c>
		if (*dTick > 0) return false;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <Debounce+0x32>
 80007ca:	2300      	movs	r3, #0
 80007cc:	e008      	b.n	80007e0 <Debounce+0x44>
		*dTick = debounceSet;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
		return true;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e003      	b.n	80007e0 <Debounce+0x44>
	} else {
		*dTick = 0;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
		return false;
 80007de:	2300      	movs	r3, #0
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DeadZone>:

void DeadZone(float* val, float zone){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	ed87 0a00 	vstr	s0, [r7]
	if(*val < -zone){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 7a00 	vldr	s14, [r3]
 80007fe:	edd7 7a00 	vldr	s15, [r7]
 8000802:	eef1 7a67 	vneg.f32	s15, s15
 8000806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d512      	bpl.n	8000836 <DeadZone+0x4a>
		*val = (*val+zone)/(1-zone);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 7a00 	vldr	s14, [r3]
 8000816:	edd7 7a00 	vldr	s15, [r7]
 800081a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800081e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000822:	edd7 7a00 	vldr	s15, [r7]
 8000826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800082a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	edc3 7a00 	vstr	s15, [r3]
	} else if(*val > zone){
		*val = (*val-zone)/(1-zone);;
	} else {
		*val = 0;
	}
}
 8000834:	e020      	b.n	8000878 <DeadZone+0x8c>
	} else if(*val > zone){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	ed97 7a00 	vldr	s14, [r7]
 8000840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000848:	d512      	bpl.n	8000870 <DeadZone+0x84>
		*val = (*val-zone)/(1-zone);;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	ed93 7a00 	vldr	s14, [r3]
 8000850:	edd7 7a00 	vldr	s15, [r7]
 8000854:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000858:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800085c:	edd7 7a00 	vldr	s15, [r7]
 8000860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	edc3 7a00 	vstr	s15, [r3]
}
 800086e:	e003      	b.n	8000878 <DeadZone+0x8c>
		*val = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <CAN_Filter>:

void CAN_Filter(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* CAN_TxHeader)
{ // This function initializes the CAN filter for the board.
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  // The CANID ports are named for their respective address bits, i.e., 0 to the 0th bit.

    // Setting up the TxHeader
    CAN_TxHeader->IDE = CAN_ID_EXT; // Extended identifier, not the standard length.
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2204      	movs	r2, #4
 8000892:	609a      	str	r2, [r3, #8]
    CAN_TxHeader->RTR = CAN_RTR_DATA; // Specifying data frames, not remote frames.
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
    CAN_TxHeader->DLC = CAN_DATA_SIZE; // CAN_SIZE_DATA; //The data size (5 bytes)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2204      	movs	r2, #4
 800089e:	611a      	str	r2, [r3, #16]
    CAN_TxHeader->ExtId = 0; // Needs to be changed depending on the frame
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]

    CAN_FilterTypeDef CAN_FILTER_CONFIG; // Declaring the filter structure.
    CAN_FILTER_CONFIG.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Choosing the FIFO0 set.
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
    CAN_FILTER_CONFIG.FilterIdHigh = (uint32_t)(CAN_ID >> 1);
 80008aa:	2307      	movs	r3, #7
 80008ac:	60bb      	str	r3, [r7, #8]
    CAN_FILTER_CONFIG.FilterIdLow = (uint32_t)((CAN_ID << 15) & 0xFFFF);
 80008ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b2:	60fb      	str	r3, [r7, #12]
    CAN_FILTER_CONFIG.FilterMaskIdHigh = (uint32_t)(CAN_ID_MASK >> 16);
 80008b4:	230f      	movs	r3, #15
 80008b6:	613b      	str	r3, [r7, #16]
    CAN_FILTER_CONFIG.FilterMaskIdLow = (uint32_t)(CAN_ID_MASK & 0xFFFF);
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    CAN_FILTER_CONFIG.FilterBank = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
    CAN_FILTER_CONFIG.FilterMode = CAN_FILTERMODE_IDMASK; // Using the mask mode to ignore certain bits.
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
    CAN_FILTER_CONFIG.FilterScale = CAN_FILTERSCALE_32BIT; // Using the extended ID so 32bit filters.
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_FILTER_CONFIG.FilterActivation = CAN_FILTER_ENABLE; // Enabling the filter.
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_CAN_ConfigFilter(hcan, &CAN_FILTER_CONFIG);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f002 f857 	bl	8002986 <HAL_CAN_ConfigFilter>
}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	@ 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <CAN_Tx_Queue_Add>:

void CAN_Tx_Queue_Add(uint32_t header, uint32_t data){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	if (!(CAN_Tx_Queue_I < CAN_QUEUE_SiZE)) return;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <CAN_Tx_Queue_Add+0x48>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	d814      	bhi.n	800091c <CAN_Tx_Queue_Add+0x3c>
	CAN_Tx_Queue_I++;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <CAN_Tx_Queue_Add+0x48>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <CAN_Tx_Queue_Add+0x48>)
 80008fc:	701a      	strb	r2, [r3, #0]
	CAN_TxHeader_Queue[CAN_Tx_Queue_I-1] = header;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <CAN_Tx_Queue_Add+0x48>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3b01      	subs	r3, #1
 8000904:	4909      	ldr	r1, [pc, #36]	@ (800092c <CAN_Tx_Queue_Add+0x4c>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	CAN_TxData_Queue[CAN_Tx_Queue_I-1] = data;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <CAN_Tx_Queue_Add+0x48>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4907      	ldr	r1, [pc, #28]	@ (8000930 <CAN_Tx_Queue_Add+0x50>)
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800091a:	e000      	b.n	800091e <CAN_Tx_Queue_Add+0x3e>
	if (!(CAN_Tx_Queue_I < CAN_QUEUE_SiZE)) return;
 800091c:	bf00      	nop
}
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	200003f0 	.word	0x200003f0
 800092c:	200003a0 	.word	0x200003a0
 8000930:	200003c8 	.word	0x200003c8

08000934 <CAN_Tx_Queue_Clear>:

void CAN_Tx_Queue_Clear(void){
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	CAN_Tx_Queue_I = 0;
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <CAN_Tx_Queue_Clear+0x14>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200003f0 	.word	0x200003f0

0800094c <ModeDebugEntry>:

//Mode 0 functions: Debug mode
void ModeDebugEntry(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	SetDisplay(DISPLAY_LEFT, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fe9a 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fe96 	bl	800068c <SetDisplay>
	selectedID = 0;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <ModeDebugEntry+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	selectedActuator = 0;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <ModeDebugEntry+0x48>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
	commandId = 0x03;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <ModeDebugEntry+0x4c>)
 800096e:	2203      	movs	r2, #3
 8000970:	701a      	strb	r2, [r3, #0]

	debounceTicks.blt = 0;
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <ModeDebugEntry+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
	debounceTicks.blb = 0;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <ModeDebugEntry+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
	debounceTicks.brt = 0;
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <ModeDebugEntry+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	debounceTicks.brb = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <ModeDebugEntry+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000037c 	.word	0x2000037c
 8000994:	2000037d 	.word	0x2000037d
 8000998:	20000002 	.word	0x20000002
 800099c:	2000035c 	.word	0x2000035c

080009a0 <ModeDebugLoop>:

void ModeDebugLoop(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	if (Debounce(&(debounceTicks.blt), inputStateCurr.blt, 20) && selectedID < 9) selectedID++;
 80009a6:	4b74      	ldr	r3, [pc, #464]	@ (8000b78 <ModeDebugLoop+0x1d8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2214      	movs	r2, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	486f      	ldr	r0, [pc, #444]	@ (8000b7c <ModeDebugLoop+0x1dc>)
 80009c0:	f7ff feec 	bl	800079c <Debounce>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d009      	beq.n	80009de <ModeDebugLoop+0x3e>
 80009ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d805      	bhi.n	80009de <ModeDebugLoop+0x3e>
 80009d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b69      	ldr	r3, [pc, #420]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 80009dc:	701a      	strb	r2, [r3, #0]
	if (Debounce(&(debounceTicks.blb), inputStateCurr.blb, 20) && selectedID > 0) selectedID--;
 80009de:	4b66      	ldr	r3, [pc, #408]	@ (8000b78 <ModeDebugLoop+0x1d8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2214      	movs	r2, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4863      	ldr	r0, [pc, #396]	@ (8000b84 <ModeDebugLoop+0x1e4>)
 80009f8:	f7ff fed0 	bl	800079c <Debounce>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d009      	beq.n	8000a16 <ModeDebugLoop+0x76>
 8000a02:	4b5f      	ldr	r3, [pc, #380]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d005      	beq.n	8000a16 <ModeDebugLoop+0x76>
 8000a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b5b      	ldr	r3, [pc, #364]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000a14:	701a      	strb	r2, [r3, #0]
	if (Debounce(&(debounceTicks.brt), inputStateCurr.brt, 20) && selectedActuator < 9) selectedActuator++;
 8000a16:	4b58      	ldr	r3, [pc, #352]	@ (8000b78 <ModeDebugLoop+0x1d8>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bf14      	ite	ne
 8000a24:	2301      	movne	r3, #1
 8000a26:	2300      	moveq	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2214      	movs	r2, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4856      	ldr	r0, [pc, #344]	@ (8000b88 <ModeDebugLoop+0x1e8>)
 8000a30:	f7ff feb4 	bl	800079c <Debounce>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d009      	beq.n	8000a4e <ModeDebugLoop+0xae>
 8000a3a:	4b54      	ldr	r3, [pc, #336]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d805      	bhi.n	8000a4e <ModeDebugLoop+0xae>
 8000a42:	4b52      	ldr	r3, [pc, #328]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b50      	ldr	r3, [pc, #320]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a4c:	701a      	strb	r2, [r3, #0]
	if (Debounce(&(debounceTicks.brb), inputStateCurr.brb, 20) && selectedActuator > 0) selectedActuator--;
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b78 <ModeDebugLoop+0x1d8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2214      	movs	r2, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	484a      	ldr	r0, [pc, #296]	@ (8000b90 <ModeDebugLoop+0x1f0>)
 8000a68:	f7ff fe98 	bl	800079c <Debounce>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d009      	beq.n	8000a86 <ModeDebugLoop+0xe6>
 8000a72:	4b46      	ldr	r3, [pc, #280]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <ModeDebugLoop+0xe6>
 8000a7a:	4b44      	ldr	r3, [pc, #272]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a84:	701a      	strb	r2, [r3, #0]
	SetDisplay(DISPLAY_LEFT, selectedID);
 8000a86:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fdfd 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, selectedActuator);
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fdf7 	bl	800068c <SetDisplay>
	if (selectedID != selectedIDPrev || selectedActuator != selectedActuatorPrev){
 8000a9e:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8000b94 <ModeDebugLoop+0x1f4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d105      	bne.n	8000ab6 <ModeDebugLoop+0x116>
 8000aaa:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b3a      	ldr	r3, [pc, #232]	@ (8000b98 <ModeDebugLoop+0x1f8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d01f      	beq.n	8000af6 <ModeDebugLoop+0x156>
		CAN_Tx_Queue_Add(
			priority<<24|commandId<<16|selectedIDPrev<<12|selectedActuatorPrev<<8|debugId<<4,
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <ModeDebugLoop+0x1fc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	061a      	lsls	r2, r3, #24
 8000abc:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <ModeDebugLoop+0x200>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <ModeDebugLoop+0x1f4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	031b      	lsls	r3, r3, #12
 8000aca:	431a      	orrs	r2, r3
 8000acc:	4b32      	ldr	r3, [pc, #200]	@ (8000b98 <ModeDebugLoop+0x1f8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	4b33      	ldr	r3, [pc, #204]	@ (8000ba4 <ModeDebugLoop+0x204>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	4313      	orrs	r3, r2
		CAN_Tx_Queue_Add(
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fefe 	bl	80008e0 <CAN_Tx_Queue_Add>
			0
		);
		selectedIDPrev = selectedID;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <ModeDebugLoop+0x1f4>)
 8000aea:	701a      	strb	r2, [r3, #0]
		selectedActuatorPrev = selectedActuator;
 8000aec:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <ModeDebugLoop+0x1f8>)
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e03c      	b.n	8000b70 <ModeDebugLoop+0x1d0>
		return;
	}
	selectedIDPrev = selectedID;
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <ModeDebugLoop+0x1f4>)
 8000afc:	701a      	strb	r2, [r3, #0]
	selectedActuatorPrev = selectedActuator;
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <ModeDebugLoop+0x1f8>)
 8000b04:	701a      	strb	r2, [r3, #0]

	float data = map(joystickValues.l, -1, 1, 0.1, 1) * joystickValues.r;
 8000b06:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <ModeDebugLoop+0x208>)
 8000b08:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b0c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8000b10:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8000bac <ModeDebugLoop+0x20c>
 8000b14:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000b18:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8000b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b20:	f7ff fe00 	bl	8000724 <map>
 8000b24:	eeb0 7a40 	vmov.f32	s14, s0
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <ModeDebugLoop+0x208>)
 8000b2a:	edd3 7a00 	vldr	s15, [r3]
 8000b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b32:	edc7 7a01 	vstr	s15, [r7, #4]
	uint32_t ndata = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
	memcpy(&ndata, &data, sizeof data);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	603b      	str	r3, [r7, #0]

	CAN_Tx_Queue_Add(
		priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <ModeDebugLoop+0x1fc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	061a      	lsls	r2, r3, #24
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <ModeDebugLoop+0x200>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	041b      	lsls	r3, r3, #16
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <ModeDebugLoop+0x1e0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	031b      	lsls	r3, r3, #12
 8000b52:	431a      	orrs	r2, r3
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <ModeDebugLoop+0x1ec>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <ModeDebugLoop+0x204>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	4313      	orrs	r3, r2
	CAN_Tx_Queue_Add(
 8000b64:	461a      	mov	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f7ff feb8 	bl	80008e0 <CAN_Tx_Queue_Add>
		ndata
	);
}
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000358 	.word	0x20000358
 8000b7c:	2000035c 	.word	0x2000035c
 8000b80:	2000037c 	.word	0x2000037c
 8000b84:	20000360 	.word	0x20000360
 8000b88:	20000364 	.word	0x20000364
 8000b8c:	2000037d 	.word	0x2000037d
 8000b90:	20000368 	.word	0x20000368
 8000b94:	2000037e 	.word	0x2000037e
 8000b98:	2000037f 	.word	0x2000037f
 8000b9c:	20000001 	.word	0x20000001
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	2000036c 	.word	0x2000036c
 8000bac:	3dcccccd 	.word	0x3dcccccd

08000bb0 <ModeDebugExit>:

void ModeDebugExit(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	SetDisplay(DISPLAY_LEFT, DISPLAY_NOTHING);
 8000bb4:	21ff      	movs	r1, #255	@ 0xff
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff fd68 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, DISPLAY_NOTHING);
 8000bbc:	21ff      	movs	r1, #255	@ 0xff
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fd64 	bl	800068c <SetDisplay>

	CAN_Tx_Queue_Clear();
 8000bc4:	f7ff feb6 	bl	8000934 <CAN_Tx_Queue_Clear>
	CAN_Tx_Queue_Add(
		priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <ModeDebugExit+0x4c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	061a      	lsls	r2, r3, #24
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <ModeDebugExit+0x50>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <ModeDebugExit+0x54>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <ModeDebugExit+0x58>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <ModeDebugExit+0x5c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4313      	orrs	r3, r2
	CAN_Tx_Queue_Add(
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe75 	bl	80008e0 <CAN_Tx_Queue_Add>
		0
	);
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000001 	.word	0x20000001
 8000c00:	20000002 	.word	0x20000002
 8000c04:	2000037c 	.word	0x2000037c
 8000c08:	2000037d 	.word	0x2000037d
 8000c0c:	20000000 	.word	0x20000000

08000c10 <ModeDriveEntry>:

//Mode 1 functions: Drive mode
void ModeDriveEntry(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	SetDisplay(DISPLAY_LEFT, 8);
 8000c14:	2108      	movs	r1, #8
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fd38 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, 8);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fd34 	bl	800068c <SetDisplay>
	selectedID = 0;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <ModeDriveEntry+0x48>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	selectedActuator = 0;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <ModeDriveEntry+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	commandId = 0x03;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <ModeDriveEntry+0x50>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]

	debounceTicks.blt = 0;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <ModeDriveEntry+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
	debounceTicks.blb = 0;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <ModeDriveEntry+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
	debounceTicks.brt = 0;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <ModeDriveEntry+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
	debounceTicks.brb = 0;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <ModeDriveEntry+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]

	CAN_Tx_Queue_Clear();
 8000c4e:	f7ff fe71 	bl	8000934 <CAN_Tx_Queue_Clear>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000037c 	.word	0x2000037c
 8000c5c:	2000037d 	.word	0x2000037d
 8000c60:	20000002 	.word	0x20000002
 8000c64:	2000035c 	.word	0x2000035c

08000c68 <ModeDriveLoop>:

void ModeDriveLoop(void){
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b095      	sub	sp, #84	@ 0x54
 8000c6c:	af00      	add	r7, sp, #0
	uint8_t drive[6] = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16};
 8000c6e:	4a79      	ldr	r2, [pc, #484]	@ (8000e54 <ModeDriveLoop+0x1ec>)
 8000c70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c78:	6018      	str	r0, [r3, #0]
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	8019      	strh	r1, [r3, #0]
	uint8_t steer[4] = {0x22, 0x23, 0x24, 0x25}; //BL, FL, BR, FR
 8000c7e:	4b76      	ldr	r3, [pc, #472]	@ (8000e58 <ModeDriveLoop+0x1f0>)
 8000c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float steerRight[4] = {-0.75, 0.75, -1, 1}; //BL, FL, BR, FR
 8000c82:	4b76      	ldr	r3, [pc, #472]	@ (8000e5c <ModeDriveLoop+0x1f4>)
 8000c84:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float steerLeft[4] = {-1, 1, -0.75, 0.75}; //BL, FL, BR, FR
 8000c8e:	4b74      	ldr	r3, [pc, #464]	@ (8000e60 <ModeDriveLoop+0x1f8>)
 8000c90:	f107 041c 	add.w	r4, r7, #28
 8000c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float steerAngle = 0.5 * 50; //rad
 8000c9a:	4b72      	ldr	r3, [pc, #456]	@ (8000e64 <ModeDriveLoop+0x1fc>)
 8000c9c:	64bb      	str	r3, [r7, #72]	@ 0x48

	for (uint8_t i=0; i<6; i++){
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000ca4:	e03c      	b.n	8000d20 <ModeDriveLoop+0xb8>
		selectedID = (drive[i] >> 4) & 0x0F;
 8000ca6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000caa:	3350      	adds	r3, #80	@ 0x50
 8000cac:	443b      	add	r3, r7
 8000cae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8000e68 <ModeDriveLoop+0x200>)
 8000cb8:	701a      	strb	r2, [r3, #0]
		selectedActuator = (drive[i] >> 0) & 0x0F;
 8000cba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cbe:	3350      	adds	r3, #80	@ 0x50
 8000cc0:	443b      	add	r3, r7
 8000cc2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b67      	ldr	r3, [pc, #412]	@ (8000e6c <ModeDriveLoop+0x204>)
 8000cce:	701a      	strb	r2, [r3, #0]
		commandId = 0x03;
 8000cd0:	4b67      	ldr	r3, [pc, #412]	@ (8000e70 <ModeDriveLoop+0x208>)
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	701a      	strb	r2, [r3, #0]
		float data = joystickValues.r;
 8000cd6:	4b67      	ldr	r3, [pc, #412]	@ (8000e74 <ModeDriveLoop+0x20c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	61bb      	str	r3, [r7, #24]
		uint32_t ndata = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
		memcpy(&ndata, &data, sizeof data);
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	617b      	str	r3, [r7, #20]
		CAN_Tx_Queue_Add(
			priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000ce4:	4b64      	ldr	r3, [pc, #400]	@ (8000e78 <ModeDriveLoop+0x210>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	061a      	lsls	r2, r3, #24
 8000cea:	4b61      	ldr	r3, [pc, #388]	@ (8000e70 <ModeDriveLoop+0x208>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	041b      	lsls	r3, r3, #16
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e68 <ModeDriveLoop+0x200>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	031b      	lsls	r3, r3, #12
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8000e6c <ModeDriveLoop+0x204>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	431a      	orrs	r2, r3
 8000d02:	4b5e      	ldr	r3, [pc, #376]	@ (8000e7c <ModeDriveLoop+0x214>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	4313      	orrs	r3, r2
		CAN_Tx_Queue_Add(
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4610      	mov	r0, r2
 8000d12:	f7ff fde5 	bl	80008e0 <CAN_Tx_Queue_Add>
	for (uint8_t i=0; i<6; i++){
 8000d16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d24:	2b05      	cmp	r3, #5
 8000d26:	d9be      	bls.n	8000ca6 <ModeDriveLoop+0x3e>
			ndata
		);
	}
	for (uint8_t i=0; i<4; i++){
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d2e:	e085      	b.n	8000e3c <ModeDriveLoop+0x1d4>
		selectedID = (steer[i] >> 4) & 0x0F;
 8000d30:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d34:	3350      	adds	r3, #80	@ 0x50
 8000d36:	443b      	add	r3, r7
 8000d38:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <ModeDriveLoop+0x200>)
 8000d42:	701a      	strb	r2, [r3, #0]
		selectedActuator = (steer[i] >> 0) & 0x0F;
 8000d44:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d48:	3350      	adds	r3, #80	@ 0x50
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <ModeDriveLoop+0x204>)
 8000d58:	701a      	strb	r2, [r3, #0]
		commandId = 0x02;
 8000d5a:	4b45      	ldr	r3, [pc, #276]	@ (8000e70 <ModeDriveLoop+0x208>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	701a      	strb	r2, [r3, #0]
		if (joystickValues.l > 0){
 8000d60:	4b44      	ldr	r3, [pc, #272]	@ (8000e74 <ModeDriveLoop+0x20c>)
 8000d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd30      	ble.n	8000dd2 <ModeDriveLoop+0x16a>
			float data = joystickValues.l * steerRight[i] * steerAngle;
 8000d70:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <ModeDriveLoop+0x20c>)
 8000d72:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d76:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	3350      	adds	r3, #80	@ 0x50
 8000d7e:	443b      	add	r3, r7
 8000d80:	3b24      	subs	r3, #36	@ 0x24
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	edc7 7a04 	vstr	s15, [r7, #16]
			uint32_t ndata = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
			memcpy(&ndata, &data, sizeof data);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	60fb      	str	r3, [r7, #12]
			CAN_Tx_Queue_Add(
				priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000d9e:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <ModeDriveLoop+0x210>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	061a      	lsls	r2, r3, #24
 8000da4:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <ModeDriveLoop+0x208>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	431a      	orrs	r2, r3
 8000dac:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <ModeDriveLoop+0x200>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	031b      	lsls	r3, r3, #12
 8000db2:	431a      	orrs	r2, r3
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <ModeDriveLoop+0x204>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <ModeDriveLoop+0x214>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4313      	orrs	r3, r2
			CAN_Tx_Queue_Add(
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4610      	mov	r0, r2
 8000dcc:	f7ff fd88 	bl	80008e0 <CAN_Tx_Queue_Add>
 8000dd0:	e02f      	b.n	8000e32 <ModeDriveLoop+0x1ca>
				ndata
			);
		} else {
			float data = joystickValues.l * steerLeft[i] * steerAngle;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <ModeDriveLoop+0x20c>)
 8000dd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dd8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	3350      	adds	r3, #80	@ 0x50
 8000de0:	443b      	add	r3, r7
 8000de2:	3b34      	subs	r3, #52	@ 0x34
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df4:	edc7 7a02 	vstr	s15, [r7, #8]
			uint32_t ndata = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
			memcpy(&ndata, &data, sizeof data);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	607b      	str	r3, [r7, #4]
			CAN_Tx_Queue_Add(
				priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <ModeDriveLoop+0x210>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	061a      	lsls	r2, r3, #24
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <ModeDriveLoop+0x208>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <ModeDriveLoop+0x200>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	031b      	lsls	r3, r3, #12
 8000e14:	431a      	orrs	r2, r3
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <ModeDriveLoop+0x204>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <ModeDriveLoop+0x214>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4313      	orrs	r3, r2
			CAN_Tx_Queue_Add(
 8000e26:	461a      	mov	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f7ff fd57 	bl	80008e0 <CAN_Tx_Queue_Add>
	for (uint8_t i=0; i<4; i++){
 8000e32:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e36:	3301      	adds	r3, #1
 8000e38:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000e3c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	f67f af75 	bls.w	8000d30 <ModeDriveLoop+0xc8>
				ndata
			);
		}
	}
	osDelay(80);
 8000e46:	2050      	movs	r0, #80	@ 0x50
 8000e48:	f004 f941 	bl	80050ce <osDelay>
}
 8000e4c:	bf00      	nop
 8000e4e:	3754      	adds	r7, #84	@ 0x54
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	08006590 	.word	0x08006590
 8000e58:	25242322 	.word	0x25242322
 8000e5c:	08006598 	.word	0x08006598
 8000e60:	080065a8 	.word	0x080065a8
 8000e64:	41c80000 	.word	0x41c80000
 8000e68:	2000037c 	.word	0x2000037c
 8000e6c:	2000037d 	.word	0x2000037d
 8000e70:	20000002 	.word	0x20000002
 8000e74:	2000036c 	.word	0x2000036c
 8000e78:	20000001 	.word	0x20000001
 8000e7c:	20000000 	.word	0x20000000

08000e80 <ModeDriveExit>:

void ModeDriveExit(void){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
	uint8_t drive[6] = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16};
 8000e86:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <ModeDriveExit+0x100>)
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e90:	6018      	str	r0, [r3, #0]
 8000e92:	3304      	adds	r3, #4
 8000e94:	8019      	strh	r1, [r3, #0]
	uint8_t steer[4] = {0x22, 0x23, 0x24, 0x25}; //BL, FL, BR, FR
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <ModeDriveExit+0x104>)
 8000e98:	607b      	str	r3, [r7, #4]

	CAN_Tx_Queue_Clear();
 8000e9a:	f7ff fd4b 	bl	8000934 <CAN_Tx_Queue_Clear>
	for (uint8_t i=0; i<6; i++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e02f      	b.n	8000f04 <ModeDriveExit+0x84>
		selectedID = (drive[i] >> 4) & 0x0F;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	443b      	add	r3, r7
 8000eaa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b35      	ldr	r3, [pc, #212]	@ (8000f88 <ModeDriveExit+0x108>)
 8000eb4:	701a      	strb	r2, [r3, #0]
		selectedActuator = (drive[i] >> 0) & 0x0F;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	3310      	adds	r3, #16
 8000eba:	443b      	add	r3, r7
 8000ebc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <ModeDriveExit+0x10c>)
 8000ec8:	701a      	strb	r2, [r3, #0]
		commandId = 0x03;
 8000eca:	4b31      	ldr	r3, [pc, #196]	@ (8000f90 <ModeDriveExit+0x110>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	701a      	strb	r2, [r3, #0]
		CAN_Tx_Queue_Add(
			priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000ed0:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <ModeDriveExit+0x114>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061a      	lsls	r2, r3, #24
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f90 <ModeDriveExit+0x110>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	041b      	lsls	r3, r3, #16
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <ModeDriveExit+0x108>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	031b      	lsls	r3, r3, #12
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <ModeDriveExit+0x10c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <ModeDriveExit+0x118>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	4313      	orrs	r3, r2
		CAN_Tx_Queue_Add(
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fcf1 	bl	80008e0 <CAN_Tx_Queue_Add>
	for (uint8_t i=0; i<6; i++){
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3301      	adds	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d9cc      	bls.n	8000ea4 <ModeDriveExit+0x24>
			0
		);
	}
	for (uint8_t i=0; i<4; i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73bb      	strb	r3, [r7, #14]
 8000f0e:	e02f      	b.n	8000f70 <ModeDriveExit+0xf0>
		selectedID = (steer[i] >> 4) & 0x0F;
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3310      	adds	r3, #16
 8000f14:	443b      	add	r3, r7
 8000f16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <ModeDriveExit+0x108>)
 8000f20:	701a      	strb	r2, [r3, #0]
		selectedActuator = (steer[i] >> 0) & 0x0F;
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	3310      	adds	r3, #16
 8000f26:	443b      	add	r3, r7
 8000f28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <ModeDriveExit+0x10c>)
 8000f34:	701a      	strb	r2, [r3, #0]
		commandId = 0x02;
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <ModeDriveExit+0x110>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
		CAN_Tx_Queue_Add(
			priority<<24|commandId<<16|selectedID<<12|selectedActuator<<8|debugId<<4,
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <ModeDriveExit+0x114>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	061a      	lsls	r2, r3, #24
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <ModeDriveExit+0x110>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <ModeDriveExit+0x108>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	031b      	lsls	r3, r3, #12
 8000f50:	431a      	orrs	r2, r3
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <ModeDriveExit+0x10c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <ModeDriveExit+0x118>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4313      	orrs	r3, r2
		CAN_Tx_Queue_Add(
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fcbb 	bl	80008e0 <CAN_Tx_Queue_Add>
	for (uint8_t i=0; i<4; i++){
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73bb      	strb	r3, [r7, #14]
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d9cc      	bls.n	8000f10 <ModeDriveExit+0x90>
			0
		);
	}
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08006590 	.word	0x08006590
 8000f84:	25242322 	.word	0x25242322
 8000f88:	2000037c 	.word	0x2000037c
 8000f8c:	2000037d 	.word	0x2000037d
 8000f90:	20000002 	.word	0x20000002
 8000f94:	20000001 	.word	0x20000001
 8000f98:	20000000 	.word	0x20000000

08000f9c <ModeNothingEntry>:

//Mode 2 and 3 functions: Unset mode
void ModeNothingEntry(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	SetDisplay(DISPLAY_LEFT, 11);
 8000fa0:	210b      	movs	r1, #11
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fb72 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, 11);
 8000fa8:	210b      	movs	r1, #11
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fb6e 	bl	800068c <SetDisplay>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <ModeNothingLoop>:

void ModeNothingLoop(void){
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <ModeNothingExit>:

void ModeNothingExit(void){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
	SetDisplay(DISPLAY_LEFT, DISPLAY_NOTHING);
 8000fc6:	21ff      	movs	r1, #255	@ 0xff
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fb5f 	bl	800068c <SetDisplay>
	SetDisplay(DISPLAY_RIGHT, DISPLAY_NOTHING);
 8000fce:	21ff      	movs	r1, #255	@ 0xff
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff fb5b 	bl	800068c <SetDisplay>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b092      	sub	sp, #72	@ 0x48
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t modeCurr = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t modePrev = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	struct ModeFunctions modeFuncs[5];
	modeFuncs[0].Entry = &ModeDebugEntry;
 8000ff0:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <StartMainTask+0x120>)
 8000ff2:	60bb      	str	r3, [r7, #8]
	modeFuncs[0].Loop = &ModeDebugLoop;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <StartMainTask+0x124>)
 8000ff6:	60fb      	str	r3, [r7, #12]
	modeFuncs[0].Exit = &ModeDebugExit;
 8000ff8:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <StartMainTask+0x128>)
 8000ffa:	613b      	str	r3, [r7, #16]
	modeFuncs[1].Entry = &ModeDriveEntry;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	@ (8001108 <StartMainTask+0x12c>)
 8000ffe:	617b      	str	r3, [r7, #20]
	modeFuncs[1].Loop = &ModeDriveLoop;
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <StartMainTask+0x130>)
 8001002:	61bb      	str	r3, [r7, #24]
	modeFuncs[1].Exit = &ModeDriveExit;
 8001004:	4b42      	ldr	r3, [pc, #264]	@ (8001110 <StartMainTask+0x134>)
 8001006:	61fb      	str	r3, [r7, #28]
	modeFuncs[2].Entry = &ModeNothingEntry;
 8001008:	4b42      	ldr	r3, [pc, #264]	@ (8001114 <StartMainTask+0x138>)
 800100a:	623b      	str	r3, [r7, #32]
	modeFuncs[2].Loop = &ModeNothingLoop;
 800100c:	4b42      	ldr	r3, [pc, #264]	@ (8001118 <StartMainTask+0x13c>)
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
	modeFuncs[2].Exit = &ModeNothingExit;
 8001010:	4b42      	ldr	r3, [pc, #264]	@ (800111c <StartMainTask+0x140>)
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
	modeFuncs[3].Entry = &ModeNothingEntry;
 8001014:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <StartMainTask+0x138>)
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
	modeFuncs[3].Loop = &ModeNothingLoop;
 8001018:	4b3f      	ldr	r3, [pc, #252]	@ (8001118 <StartMainTask+0x13c>)
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
	modeFuncs[3].Exit = &ModeNothingExit;
 800101c:	4b3f      	ldr	r3, [pc, #252]	@ (800111c <StartMainTask+0x140>)
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
	modeFuncs[4].Entry = &ModeNothingEntry;
 8001020:	4b3c      	ldr	r3, [pc, #240]	@ (8001114 <StartMainTask+0x138>)
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
	modeFuncs[4].Loop = &ModeNothingLoop;
 8001024:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <StartMainTask+0x13c>)
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
	modeFuncs[4].Exit = &ModeNothingExit;
 8001028:	4b3c      	ldr	r3, [pc, #240]	@ (800111c <StartMainTask+0x140>)
 800102a:	643b      	str	r3, [r7, #64]	@ 0x40

	/* Infinite loop */
	for(;;)
	{
		modeCurr = inputStateCurr.sw4? 3: modeCurr;
 800102c:	4b3c      	ldr	r3, [pc, #240]	@ (8001120 <StartMainTask+0x144>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <StartMainTask+0x64>
 800103a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800103e:	e000      	b.n	8001042 <StartMainTask+0x66>
 8001040:	2303      	movs	r3, #3
 8001042:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		modeCurr = inputStateCurr.sw3? 2: modeCurr;
 8001046:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <StartMainTask+0x144>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <StartMainTask+0x7e>
 8001054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001058:	e000      	b.n	800105c <StartMainTask+0x80>
 800105a:	2302      	movs	r3, #2
 800105c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		modeCurr = inputStateCurr.sw2? 1: modeCurr;
 8001060:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <StartMainTask+0x144>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <StartMainTask+0x98>
 800106e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001072:	e000      	b.n	8001076 <StartMainTask+0x9a>
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		modeCurr = inputStateCurr.sw1? 0: modeCurr;
 800107a:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <StartMainTask+0x144>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <StartMainTask+0xb2>
 8001088:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800108c:	e000      	b.n	8001090 <StartMainTask+0xb4>
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		if (modeCurr != modePrev){
 8001094:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001098:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800109c:	429a      	cmp	r2, r3
 800109e:	d01d      	beq.n	80010dc <StartMainTask+0x100>
			modeFuncs[modePrev].Exit();
 80010a0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	3348      	adds	r3, #72	@ 0x48
 80010ae:	443b      	add	r3, r7
 80010b0:	3b38      	subs	r3, #56	@ 0x38
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4798      	blx	r3
			modeFuncs[modeCurr].Entry();
 80010b6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3348      	adds	r3, #72	@ 0x48
 80010c4:	443b      	add	r3, r7
 80010c6:	3b40      	subs	r3, #64	@ 0x40
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4798      	blx	r3
			modePrev = modeCurr;
 80010cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			osDelay(40);
 80010d4:	2028      	movs	r0, #40	@ 0x28
 80010d6:	f003 fffa 	bl	80050ce <osDelay>
			continue;
 80010da:	e00d      	b.n	80010f8 <StartMainTask+0x11c>
		}
		modeFuncs[modeCurr].Loop();
 80010dc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	3348      	adds	r3, #72	@ 0x48
 80010ea:	443b      	add	r3, r7
 80010ec:	3b3c      	subs	r3, #60	@ 0x3c
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4798      	blx	r3

		osDelay(20);
 80010f2:	2014      	movs	r0, #20
 80010f4:	f003 ffeb 	bl	80050ce <osDelay>
		modeCurr = inputStateCurr.sw4? 3: modeCurr;
 80010f8:	e798      	b.n	800102c <StartMainTask+0x50>
 80010fa:	bf00      	nop
 80010fc:	0800094d 	.word	0x0800094d
 8001100:	080009a1 	.word	0x080009a1
 8001104:	08000bb1 	.word	0x08000bb1
 8001108:	08000c11 	.word	0x08000c11
 800110c:	08000c69 	.word	0x08000c69
 8001110:	08000e81 	.word	0x08000e81
 8001114:	08000f9d 	.word	0x08000f9d
 8001118:	08000fb5 	.word	0x08000fb5
 800111c:	08000fc3 	.word	0x08000fc3
 8001120:	20000358 	.word	0x20000358

08001124 <convert.0>:
*/
/* USER CODE END Header_StartInputPoll */
void StartInputPoll(void const * argument)
{
  /* USER CODE BEGIN StartInputPoll */
	bool convert(GPIO_PinState state){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	f8c7 c000 	str.w	ip, [r7]
		if (state == GPIO_PIN_SET){
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <convert.0+0x18>
			return true;
 8001138:	2301      	movs	r3, #1
 800113a:	e005      	b.n	8001148 <convert.0+0x24>
		} else if (state == GPIO_PIN_RESET){
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <convert.0+0x22>
			return false;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <convert.0+0x24>
		} else {
			return false;
 8001146:	2300      	movs	r3, #0
		}
	}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <StartInputPoll>:
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
void StartInputPoll(void const * argument)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		//Poll for button and switch digital inputs.
		inputStateCurr.sw1 = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8001162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001166:	4871      	ldr	r0, [pc, #452]	@ (800132c <StartInputPoll+0x1d8>)
 8001168:	f002 f848 	bl	80031fc <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	469c      	mov	ip, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f7ff ffd4 	bl	8001124 <convert.0>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4a6b      	ldr	r2, [pc, #428]	@ (8001330 <StartInputPoll+0x1dc>)
 8001182:	7813      	ldrb	r3, [r2, #0]
 8001184:	f361 0300 	bfi	r3, r1, #0, #1
 8001188:	7013      	strb	r3, [r2, #0]
		inputStateCurr.sw2 = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 800118a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118e:	4867      	ldr	r0, [pc, #412]	@ (800132c <StartInputPoll+0x1d8>)
 8001190:	f002 f834 	bl	80031fc <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	469c      	mov	ip, r3
 800119e:	4610      	mov	r0, r2
 80011a0:	f7ff ffc0 	bl	8001124 <convert.0>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a61      	ldr	r2, [pc, #388]	@ (8001330 <StartInputPoll+0x1dc>)
 80011aa:	7813      	ldrb	r3, [r2, #0]
 80011ac:	f361 0341 	bfi	r3, r1, #1, #1
 80011b0:	7013      	strb	r3, [r2, #0]
		inputStateCurr.sw3 = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 80011b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b6:	485d      	ldr	r0, [pc, #372]	@ (800132c <StartInputPoll+0x1d8>)
 80011b8:	f002 f820 	bl	80031fc <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	469c      	mov	ip, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f7ff ffac 	bl	8001124 <convert.0>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4a57      	ldr	r2, [pc, #348]	@ (8001330 <StartInputPoll+0x1dc>)
 80011d2:	7813      	ldrb	r3, [r2, #0]
 80011d4:	f361 0382 	bfi	r3, r1, #2, #1
 80011d8:	7013      	strb	r3, [r2, #0]
		inputStateCurr.sw4 = false;
 80011da:	4a55      	ldr	r2, [pc, #340]	@ (8001330 <StartInputPoll+0x1dc>)
 80011dc:	7813      	ldrb	r3, [r2, #0]
 80011de:	f36f 03c3 	bfc	r3, #3, #1
 80011e2:	7013      	strb	r3, [r2, #0]
		inputStateCurr.blt = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	4851      	ldr	r0, [pc, #324]	@ (800132c <StartInputPoll+0x1d8>)
 80011e8:	f002 f808 	bl	80031fc <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	469c      	mov	ip, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff ff94 	bl	8001124 <convert.0>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <StartInputPoll+0x1dc>)
 8001202:	7813      	ldrb	r3, [r2, #0]
 8001204:	f361 1304 	bfi	r3, r1, #4, #1
 8001208:	7013      	strb	r3, [r2, #0]
		inputStateCurr.blb = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8));
 800120a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120e:	4847      	ldr	r0, [pc, #284]	@ (800132c <StartInputPoll+0x1d8>)
 8001210:	f001 fff4 	bl	80031fc <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	469c      	mov	ip, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f7ff ff80 	bl	8001124 <convert.0>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	4a41      	ldr	r2, [pc, #260]	@ (8001330 <StartInputPoll+0x1dc>)
 800122a:	7813      	ldrb	r3, [r2, #0]
 800122c:	f361 1345 	bfi	r3, r1, #5, #1
 8001230:	7013      	strb	r3, [r2, #0]
		inputStateCurr.brt = convert(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15));
 8001232:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001236:	483f      	ldr	r0, [pc, #252]	@ (8001334 <StartInputPoll+0x1e0>)
 8001238:	f001 ffe0 	bl	80031fc <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	469c      	mov	ip, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f7ff ff6c 	bl	8001124 <convert.0>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <StartInputPoll+0x1dc>)
 8001252:	7813      	ldrb	r3, [r2, #0]
 8001254:	f361 1386 	bfi	r3, r1, #6, #1
 8001258:	7013      	strb	r3, [r2, #0]
		inputStateCurr.brb = convert(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14));
 800125a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800125e:	4835      	ldr	r0, [pc, #212]	@ (8001334 <StartInputPoll+0x1e0>)
 8001260:	f001 ffcc 	bl	80031fc <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	469c      	mov	ip, r3
 800126e:	4610      	mov	r0, r2
 8001270:	f7ff ff58 	bl	8001124 <convert.0>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4a2d      	ldr	r2, [pc, #180]	@ (8001330 <StartInputPoll+0x1dc>)
 800127a:	7813      	ldrb	r3, [r2, #0]
 800127c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001280:	7013      	strb	r3, [r2, #0]

		//Poll for joystick analog inputs.
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001282:	f04f 31ff 	mov.w	r1, #4294967295
 8001286:	482c      	ldr	r0, [pc, #176]	@ (8001338 <StartInputPoll+0x1e4>)
 8001288:	f000 fdbe 	bl	8001e08 <HAL_ADC_PollForConversion>
		joystickValues.rraw = HAL_ADC_GetValue(&hadc2);
 800128c:	482a      	ldr	r0, [pc, #168]	@ (8001338 <StartInputPoll+0x1e4>)
 800128e:	f000 febd 	bl	800200c <HAL_ADC_GetValue>
 8001292:	4603      	mov	r3, r0
 8001294:	4a29      	ldr	r2, [pc, #164]	@ (800133c <StartInputPoll+0x1e8>)
 8001296:	6093      	str	r3, [r2, #8]
		joystickValues.r = -map((float)(joystickValues.rraw), 0, JSTICK_R_MAX, -1, 1);
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <StartInputPoll+0x1e8>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80012a8:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80012ac:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001340 <StartInputPoll+0x1ec>
 80012b0:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8001344 <StartInputPoll+0x1f0>
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	f7ff fa34 	bl	8000724 <map>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	eef1 7a67 	vneg.f32	s15, s15
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <StartInputPoll+0x1e8>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
		DeadZone(&(joystickValues.r), DEAD_ZONE_SIZE);
 80012ca:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001348 <StartInputPoll+0x1f4>
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <StartInputPoll+0x1e8>)
 80012d0:	f7ff fa8c 	bl	80007ec <DeadZone>
		HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	481c      	ldr	r0, [pc, #112]	@ (800134c <StartInputPoll+0x1f8>)
 80012da:	f000 fd95 	bl	8001e08 <HAL_ADC_PollForConversion>
		joystickValues.lraw = HAL_ADC_GetValue(&hadc4);
 80012de:	481b      	ldr	r0, [pc, #108]	@ (800134c <StartInputPoll+0x1f8>)
 80012e0:	f000 fe94 	bl	800200c <HAL_ADC_GetValue>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a15      	ldr	r2, [pc, #84]	@ (800133c <StartInputPoll+0x1e8>)
 80012e8:	60d3      	str	r3, [r2, #12]
		joystickValues.l = map((float)(joystickValues.lraw), 0, JSTICK_L_MAX, -1, 1);
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <StartInputPoll+0x1e8>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80012fa:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80012fe:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001350 <StartInputPoll+0x1fc>
 8001302:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001344 <StartInputPoll+0x1f0>
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	f7ff fa0b 	bl	8000724 <map>
 800130e:	eef0 7a40 	vmov.f32	s15, s0
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <StartInputPoll+0x1e8>)
 8001314:	edc3 7a01 	vstr	s15, [r3, #4]
		DeadZone(&(joystickValues.l), DEAD_ZONE_SIZE);
 8001318:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001348 <StartInputPoll+0x1f4>
 800131c:	480d      	ldr	r0, [pc, #52]	@ (8001354 <StartInputPoll+0x200>)
 800131e:	f7ff fa65 	bl	80007ec <DeadZone>

		osDelay(40);
 8001322:	2028      	movs	r0, #40	@ 0x28
 8001324:	f003 fed3 	bl	80050ce <osDelay>
		inputStateCurr.sw1 = convert(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8001328:	bf00      	nop
 800132a:	e71a      	b.n	8001162 <StartInputPoll+0xe>
 800132c:	48000400 	.word	0x48000400
 8001330:	20000358 	.word	0x20000358
 8001334:	48000800 	.word	0x48000800
 8001338:	20000284 	.word	0x20000284
 800133c:	2000036c 	.word	0x2000036c
 8001340:	453e6000 	.word	0x453e6000
 8001344:	00000000 	.word	0x00000000
 8001348:	3e19999a 	.word	0x3e19999a
 800134c:	200002d4 	.word	0x200002d4
 8001350:	456ec000 	.word	0x456ec000
 8001354:	20000370 	.word	0x20000370

08001358 <StartManageCanBus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageCanBus */
void StartManageCanBus(void const * argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageCanBus */
	/* Infinite loop */
	for(;;)
	{
		osDelay(10);
 8001360:	200a      	movs	r0, #10
 8001362:	f003 feb4 	bl	80050ce <osDelay>
		if (!(CAN_Tx_Queue_I > 0)) continue;
 8001366:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <StartManageCanBus+0xa0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d040      	beq.n	80013f0 <StartManageCanBus+0x98>
		CAN_TxHeader.ExtId = CAN_TxHeader_Queue[CAN_Tx_Queue_I-1];
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <StartManageCanBus+0xa0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <StartManageCanBus+0xa4>)
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <StartManageCanBus+0xa8>)
 800137c:	6053      	str	r3, [r2, #4]
		CAN_TxData[0] = CAN_TxData_Queue[CAN_Tx_Queue_I-1] >> 24;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <StartManageCanBus+0xa0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <StartManageCanBus+0xac>)
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	0e1b      	lsrs	r3, r3, #24
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <StartManageCanBus+0xb0>)
 8001390:	701a      	strb	r2, [r3, #0]
		CAN_TxData[1] = CAN_TxData_Queue[CAN_Tx_Queue_I-1] >> 16;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <StartManageCanBus+0xa0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a1a      	ldr	r2, [pc, #104]	@ (8001404 <StartManageCanBus+0xac>)
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	0c1b      	lsrs	r3, r3, #16
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <StartManageCanBus+0xb0>)
 80013a4:	705a      	strb	r2, [r3, #1]
		CAN_TxData[2] = CAN_TxData_Queue[CAN_Tx_Queue_I-1] >> 8;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <StartManageCanBus+0xa0>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <StartManageCanBus+0xac>)
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <StartManageCanBus+0xb0>)
 80013b8:	709a      	strb	r2, [r3, #2]
		CAN_TxData[3] = CAN_TxData_Queue[CAN_Tx_Queue_I-1] >> 0;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <StartManageCanBus+0xa0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <StartManageCanBus+0xac>)
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <StartManageCanBus+0xb0>)
 80013ca:	70da      	strb	r2, [r3, #3]
		HAL_StatusTypeDef result = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, CAN_TxData, &CAN_TxMailbox);
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <StartManageCanBus+0xb4>)
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <StartManageCanBus+0xb0>)
 80013d0:	490b      	ldr	r1, [pc, #44]	@ (8001400 <StartManageCanBus+0xa8>)
 80013d2:	480f      	ldr	r0, [pc, #60]	@ (8001410 <StartManageCanBus+0xb8>)
 80013d4:	f001 fbe5 	bl	8002ba2 <HAL_CAN_AddTxMessage>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK) continue;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <StartManageCanBus+0x9c>
		CAN_Tx_Queue_I--;
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <StartManageCanBus+0xa0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <StartManageCanBus+0xa0>)
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e7b7      	b.n	8001360 <StartManageCanBus+0x8>
		if (!(CAN_Tx_Queue_I > 0)) continue;
 80013f0:	bf00      	nop
 80013f2:	e7b5      	b.n	8001360 <StartManageCanBus+0x8>
		if (result != HAL_OK) continue;
 80013f4:	bf00      	nop
	{
 80013f6:	e7b3      	b.n	8001360 <StartManageCanBus+0x8>
 80013f8:	200003f0 	.word	0x200003f0
 80013fc:	200003a0 	.word	0x200003a0
 8001400:	20000380 	.word	0x20000380
 8001404:	200003c8 	.word	0x200003c8
 8001408:	2000039c 	.word	0x2000039c
 800140c:	20000398 	.word	0x20000398
 8001410:	20000324 	.word	0x20000324

08001414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001426:	f000 f9d9 	bl	80017dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40001000 	.word	0x40001000

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_MspInit+0x4c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_MspInit+0x4c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_MspInit+0x4c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_MspInit+0x4c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_MspInit+0x4c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	210f      	movs	r1, #15
 800147e:	f06f 0001 	mvn.w	r0, #1
 8001482:	f001 fd17 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001560 <HAL_ADC_MspInit+0xcc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d125      	bne.n	8001502 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f001 fd04 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001500:	e029      	b.n	8001556 <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <HAL_ADC_MspInit+0xd4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d124      	bne.n	8001556 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 8001512:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001516:	6153      	str	r3, [r2, #20]
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 800152a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152e:	6153      	str	r3, [r2, #20]
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <HAL_ADC_MspInit+0xd0>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800153c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	@ (800156c <HAL_ADC_MspInit+0xd8>)
 8001552:	f001 fcd9 	bl	8002f08 <HAL_GPIO_Init>
}
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	@ 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	50000100 	.word	0x50000100
 8001564:	40021000 	.word	0x40021000
 8001568:	50000500 	.word	0x50000500
 800156c:	48000400 	.word	0x48000400

08001570 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <HAL_CAN_MspInit+0x80>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d129      	bne.n	80015e6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 8001598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_CAN_MspInit+0x84>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80015d4:	2309      	movs	r3, #9
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f001 fc91 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40006400 	.word	0x40006400
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	@ 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001608:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <HAL_InitTick+0xe0>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_InitTick+0xe0>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <HAL_InitTick+0xe0>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001620:	f107 0210 	add.w	r2, r7, #16
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f003 f852 	bl	80046d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163a:	f003 f829 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 800163e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001640:	e004      	b.n	800164c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001642:	f003 f825 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_InitTick+0xe4>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3b01      	subs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_InitTick+0xe8>)
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_InitTick+0xec>)
 800165e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_InitTick+0xe8>)
 8001662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001666:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_InitTick+0xe8>)
 800166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_InitTick+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_InitTick+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_InitTick+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <HAL_InitTick+0xe8>)
 8001682:	f003 fa09 	bl	8004a98 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800168c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11b      	bne.n	80016cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <HAL_InitTick+0xe8>)
 8001696:	f003 fa61 	bl	8004b5c <HAL_TIM_Base_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d111      	bne.n	80016cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016a8:	2036      	movs	r0, #54	@ 0x36
 80016aa:	f001 fc1f 	bl	8002eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d808      	bhi.n	80016c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2036      	movs	r0, #54	@ 0x36
 80016ba:	f001 fbfb 	bl	8002eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_InitTick+0xf0>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e002      	b.n	80016cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	200003f4 	.word	0x200003f4
 80016e4:	40001000 	.word	0x40001000
 80016e8:	20000008 	.word	0x20000008

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <TIM6_DAC_IRQHandler+0x10>)
 800172a:	f003 fa81 	bl	8004c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200003f4 	.word	0x200003f4

08001738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001794 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001760:	f7ff ffea 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f004 fe8d 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178e:	f7fe fd39 	bl	8000204 <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001794:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017a0:	08006600 	.word	0x08006600
  ldr r2, =_sbss
 80017a4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017a8:	20001190 	.word	0x20001190

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_Init+0x28>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_Init+0x28>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f001 fb6c 	bl	8002e9e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff ff16 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fe3a 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	20000440 	.word	0x20000440

08001804 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;  
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000440 	.word	0x20000440

0800181c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09a      	sub	sp, #104	@ 0x68
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e1c9      	b.n	8001bd0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d176      	bne.n	800193c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d152      	bne.n	80018fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe0f 	bl	8001494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d13b      	bne.n	80018fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 ff1d 	bl	80026c4 <ADC_Disable>
 800188a:	4603      	mov	r3, r0
 800188c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d12f      	bne.n	80018fc <HAL_ADC_Init+0xe0>
 800189c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d12b      	bne.n	80018fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018ac:	f023 0302 	bic.w	r3, r3, #2
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80018d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d8:	4b86      	ldr	r3, [pc, #536]	@ (8001af4 <HAL_ADC_Init+0x2d8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a86      	ldr	r2, [pc, #536]	@ (8001af8 <HAL_ADC_Init+0x2dc>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9a      	lsrs	r2, r3, #18
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f9      	bne.n	80018f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001918:	d110      	bne.n	800193c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f023 0312 	bic.w	r3, r3, #18
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	f040 8136 	bne.w	8001bb6 <HAL_ADC_Init+0x39a>
 800194a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8131 	bne.w	8001bb6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 8129 	bne.w	8001bb6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800196c:	f043 0202 	orr.w	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800197c:	d004      	beq.n	8001988 <HAL_ADC_Init+0x16c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5e      	ldr	r2, [pc, #376]	@ (8001afc <HAL_ADC_Init+0x2e0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_ADC_Init+0x170>
 8001988:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <HAL_ADC_Init+0x2e4>)
 800198a:	e000      	b.n	800198e <HAL_ADC_Init+0x172>
 800198c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_ADC_Init+0x2e8>)
 800198e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001998:	d102      	bne.n	80019a0 <HAL_ADC_Init+0x184>
 800199a:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_ADC_Init+0x2e0>)
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e01a      	b.n	80019d6 <HAL_ADC_Init+0x1ba>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a55      	ldr	r2, [pc, #340]	@ (8001afc <HAL_ADC_Init+0x2e0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d103      	bne.n	80019b2 <HAL_ADC_Init+0x196>
 80019aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e011      	b.n	80019d6 <HAL_ADC_Init+0x1ba>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a54      	ldr	r2, [pc, #336]	@ (8001b08 <HAL_ADC_Init+0x2ec>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <HAL_ADC_Init+0x1a6>
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_ADC_Init+0x2f0>)
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e009      	b.n	80019d6 <HAL_ADC_Init+0x1ba>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a51      	ldr	r2, [pc, #324]	@ (8001b0c <HAL_ADC_Init+0x2f0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <HAL_ADC_Init+0x1b6>
 80019cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b08 <HAL_ADC_Init+0x2ec>)
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e001      	b.n	80019d6 <HAL_ADC_Init+0x1ba>
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_ADC_Init+0x1da>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_Init+0x1da>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_ADC_Init+0x1dc>
 80019f6:	2300      	movs	r3, #0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11c      	bne.n	8001a36 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_ADC_Init+0x202>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_Init+0x202>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_ADC_Init+0x204>
 8001a1e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d108      	bne.n	8001a36 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a34:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e5b      	ldrb	r3, [r3, #25]
 8001a3a:	035b      	lsls	r3, r3, #13
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a40:	2a01      	cmp	r2, #1
 8001a42:	d002      	beq.n	8001a4a <HAL_ADC_Init+0x22e>
 8001a44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_Init+0x230>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d11b      	bne.n	8001aa2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7e5b      	ldrb	r3, [r3, #25]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	045a      	lsls	r2, r3, #17
 8001a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a84:	e00d      	b.n	8001aa2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d03a      	beq.n	8001b20 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_ADC_Init+0x2ec>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_Init+0x2a2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <HAL_ADC_Init+0x2f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d128      	bne.n	8001b10 <HAL_ADC_Init+0x2f4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001ac6:	d012      	beq.n	8001aee <HAL_ADC_Init+0x2d2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_ADC_Init+0x2cc>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001ada:	d002      	beq.n	8001ae2 <HAL_ADC_Init+0x2c6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	e018      	b.n	8001b14 <HAL_ADC_Init+0x2f8>
 8001ae2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae6:	e015      	b.n	8001b14 <HAL_ADC_Init+0x2f8>
 8001ae8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001aec:	e012      	b.n	8001b14 <HAL_ADC_Init+0x2f8>
 8001aee:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001af2:	e00f      	b.n	8001b14 <HAL_ADC_Init+0x2f8>
 8001af4:	20000004 	.word	0x20000004
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	50000100 	.word	0x50000100
 8001b00:	50000300 	.word	0x50000300
 8001b04:	50000700 	.word	0x50000700
 8001b08:	50000400 	.word	0x50000400
 8001b0c:	50000500 	.word	0x50000500
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d114      	bne.n	8001b58 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b3c:	f023 0302 	bic.w	r3, r3, #2
 8001b40:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7e1b      	ldrb	r3, [r3, #24]
 8001b46:	039a      	lsls	r2, r3, #14
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4313      	orrs	r3, r2
 8001b52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b54:	4313      	orrs	r3, r2
 8001b56:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_ADC_Init+0x3bc>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10c      	bne.n	8001b8e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f023 010f 	bic.w	r1, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 020f 	bic.w	r2, r2, #15
 8001b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bb4:	e00a      	b.n	8001bcc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f023 0312 	bic.w	r3, r3, #18
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3768      	adds	r7, #104	@ 0x68
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	fff0c007 	.word	0xfff0c007

08001bdc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80f9 	bne.w	8001dea <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start+0x2a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0f4      	b.n	8001df0 <HAL_ADC_Start+0x214>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fcf4 	bl	80025fc <ADC_Enable>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80e0 	bne.w	8001de0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Start+0x6c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Start+0x7a>
 8001c48:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d010      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c54:	e005      	b.n	8001c62 <HAL_ADC_Start+0x86>
 8001c56:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c6a:	d004      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a64      	ldr	r2, [pc, #400]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d115      	bne.n	8001ca2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d036      	beq.n	8001cfe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ca0:	e02d      	b.n	8001cfe <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Start+0xe6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_Start+0xfc>
 8001cc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e008      	b.n	8001cea <HAL_ADC_Start+0x10e>
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	f023 0206 	bic.w	r2, r3, #6
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	221c      	movs	r2, #28
 8001d2e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d38:	d004      	beq.n	8001d44 <HAL_ADC_Start+0x168>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_Start+0x176>
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d03e      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d50:	e005      	b.n	8001d5e <HAL_ADC_Start+0x182>
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d037      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Start+0x196>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_Start+0x1a4>
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d027      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d7e:	e005      	b.n	8001d8c <HAL_ADC_Start+0x1b0>
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d020      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Start+0x1c4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_Start+0x1d2>
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d010      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dac:	e005      	b.n	8001dba <HAL_ADC_Start+0x1de>
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d009      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10f      	bne.n	8001dee <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0204 	orr.w	r2, r2, #4
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	e006      	b.n	8001dee <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001de8:	e001      	b.n	8001dee <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	50000100 	.word	0x50000100
 8001dfc:	50000300 	.word	0x50000300
 8001e00:	50000700 	.word	0x50000700
 8001e04:	50000400 	.word	0x50000400

08001e08 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e03a      	b.n	8001e9a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_PollForConversion+0x30>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a72      	ldr	r2, [pc, #456]	@ (8001ffc <HAL_ADC_PollForConversion+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_PollForConversion+0x34>
 8001e38:	4b71      	ldr	r3, [pc, #452]	@ (8002000 <HAL_ADC_PollForConversion+0x1f8>)
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_PollForConversion+0x36>
 8001e3c:	4b71      	ldr	r3, [pc, #452]	@ (8002004 <HAL_ADC_PollForConversion+0x1fc>)
 8001e3e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d11d      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f043 0220 	orr.w	r2, r3, #32
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0bf      	b.n	8001ff2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0ad      	b.n	8001ff2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e96:	230c      	movs	r3, #12
 8001e98:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ea2:	d004      	beq.n	8001eae <HAL_ADC_PollForConversion+0xa6>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a54      	ldr	r2, [pc, #336]	@ (8001ffc <HAL_ADC_PollForConversion+0x1f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_PollForConversion+0xb4>
 8001eae:	4b54      	ldr	r3, [pc, #336]	@ (8002000 <HAL_ADC_PollForConversion+0x1f8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_ADC_PollForConversion+0xd4>
 8001eba:	e005      	b.n	8001ec8 <HAL_ADC_PollForConversion+0xc0>
 8001ebc:	4b51      	ldr	r3, [pc, #324]	@ (8002004 <HAL_ADC_PollForConversion+0x1fc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_ADC_PollForConversion+0xd4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed0:	d004      	beq.n	8001edc <HAL_ADC_PollForConversion+0xd4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <HAL_ADC_PollForConversion+0x200>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d104      	bne.n	8001ee6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e00f      	b.n	8001f06 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_PollForConversion+0xf2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <HAL_ADC_PollForConversion+0x1f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d102      	bne.n	8001f00 <HAL_ADC_PollForConversion+0xf8>
 8001efa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_PollForConversion+0xfa>
 8001f00:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_ADC_PollForConversion+0x200>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f06:	f7ff fc7d 	bl	8001804 <HAL_GetTick>
 8001f0a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f0c:	e021      	b.n	8001f52 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d01d      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_ADC_PollForConversion+0x124>
 8001f1c:	f7ff fc72 	bl	8001804 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d212      	bcs.n	8001f52 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f043 0204 	orr.w	r2, r3, #4
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e04f      	b.n	8001ff2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0d6      	beq.n	8001f0e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d131      	bne.n	8001fde <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d12c      	bne.n	8001fde <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d125      	bne.n	8001fde <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d112      	bne.n	8001fc6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d112      	bne.n	8001fde <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fc4:	e00b      	b.n	8001fde <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	50000100 	.word	0x50000100
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700
 8002008:	50000400 	.word	0x50000400

0800200c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b09b      	sub	sp, #108	@ 0x6c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e2c8      	b.n	80025dc <HAL_ADC_ConfigChannel+0x5b4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 82ac 	bne.w	80025ba <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	231f      	movs	r3, #31
 8002080:	4093      	lsls	r3, r2
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a2:	e063      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d81e      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	3b1e      	subs	r3, #30
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3b1e      	subs	r3, #30
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e8:	e040      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0e      	cmp	r3, #14
 80020f0:	d81e      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3b3c      	subs	r3, #60	@ 0x3c
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	3b3c      	subs	r3, #60	@ 0x3c
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
 800212e:	e01d      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b5a      	subs	r3, #90	@ 0x5a
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4019      	ands	r1, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3b5a      	subs	r3, #90	@ 0x5a
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80e5 	bne.w	8002346 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	3b01      	subs	r3, #1
 8002210:	2b03      	cmp	r3, #3
 8002212:	d84f      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x28c>
 8002214:	a201      	add	r2, pc, #4	@ (adr r2, 800221c <HAL_ADC_ConfigChannel+0x1f4>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800224f 	.word	0x0800224f
 8002224:	08002271 	.word	0x08002271
 8002228:	08002293 	.word	0x08002293
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002232:	4b99      	ldr	r3, [pc, #612]	@ (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	0691      	lsls	r1, r2, #26
 800223c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800224c:	e07b      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002254:	4b90      	ldr	r3, [pc, #576]	@ (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	0691      	lsls	r1, r2, #26
 800225e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002260:	430a      	orrs	r2, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800226c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800226e:	e06a      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002276:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800228e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e059      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002298:	4b7f      	ldr	r3, [pc, #508]	@ (8002498 <HAL_ADC_ConfigChannel+0x470>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022b0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e048      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022d6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022fa:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800231e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002342:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002344:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d108      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x33e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x33e>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_ADC_ConfigChannel+0x340>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 8131 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00f      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002394:	e049      	b.n	800242a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	409a      	lsls	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d91c      	bls.n	80023f2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1b      	subs	r3, #27
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	3b1b      	subs	r3, #27
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	e01b      	b.n	800242a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6959      	ldr	r1, [r3, #20]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	2207      	movs	r2, #7
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4019      	ands	r1, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6898      	ldr	r0, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002432:	d004      	beq.n	800243e <HAL_ADC_ConfigChannel+0x416>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_ADC_ConfigChannel+0x474>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x41a>
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_ADC_ConfigChannel+0x478>)
 8002440:	e000      	b.n	8002444 <HAL_ADC_ConfigChannel+0x41c>
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_ADC_ConfigChannel+0x47c>)
 8002444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d105      	bne.n	800245a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800244e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800245e:	2b11      	cmp	r3, #17
 8002460:	d105      	bne.n	800246e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002472:	2b12      	cmp	r3, #18
 8002474:	f040 80ac 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80a5 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x480>
 8002490:	4b02      	ldr	r3, [pc, #8]	@ (800249c <HAL_ADC_ConfigChannel+0x474>)
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e023      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 8002496:	bf00      	nop
 8002498:	83fff000 	.word	0x83fff000
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000300 	.word	0x50000300
 80024a4:	50000700 	.word	0x50000700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4e      	ldr	r2, [pc, #312]	@ (80025e8 <HAL_ADC_ConfigChannel+0x5c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d103      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x492>
 80024b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e011      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4b      	ldr	r2, [pc, #300]	@ (80025ec <HAL_ADC_ConfigChannel+0x5c4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x4a2>
 80024c4:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e009      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a48      	ldr	r2, [pc, #288]	@ (80025f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_ADC_ConfigChannel+0x4b2>
 80024d4:	4b45      	ldr	r3, [pc, #276]	@ (80025ec <HAL_ADC_ConfigChannel+0x5c4>)
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e001      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x4d6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x4d6>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_ADC_ConfigChannel+0x4d8>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d150      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002504:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x4fe>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x4fe>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_ADC_ConfigChannel+0x500>
 8002526:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13c      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11d      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x548>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253c:	d118      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800253e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002548:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_ADC_ConfigChannel+0x5cc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2a      	ldr	r2, [pc, #168]	@ (80025f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9a      	lsrs	r2, r3, #18
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002560:	e002      	b.n	8002568 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800256e:	e02e      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x568>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800258a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800258c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800258e:	e01e      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d11a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025a4:	e013      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025b8:	e00a      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025cc:	e000      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80025dc:	4618      	mov	r0, r3
 80025de:	376c      	adds	r7, #108	@ 0x6c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	50000100 	.word	0x50000100
 80025ec:	50000400 	.word	0x50000400
 80025f0:	50000500 	.word	0x50000500
 80025f4:	20000004 	.word	0x20000004
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <ADC_Enable+0x2c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <ADC_Enable+0x2c>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <ADC_Enable+0x2e>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d143      	bne.n	80026b6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <ADC_Enable+0xc4>)
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e02f      	b.n	80026b8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002668:	f7ff f8cc 	bl	8001804 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800266e:	e01b      	b.n	80026a8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002670:	f7ff f8c8 	bl	8001804 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d914      	bls.n	80026a8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d00d      	beq.n	80026a8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d1dc      	bne.n	8002670 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	8000003f 	.word	0x8000003f

080026c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <ADC_Disable+0x2c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <ADC_Disable+0x2c>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <ADC_Disable+0x2e>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d047      	beq.n	8002786 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030d 	and.w	r3, r3, #13
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10f      	bne.n	8002724 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0202 	orr.w	r2, r2, #2
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2203      	movs	r2, #3
 800271a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800271c:	f7ff f872 	bl	8001804 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002722:	e029      	b.n	8002778 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f043 0210 	orr.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e023      	b.n	8002788 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002740:	f7ff f860 	bl	8001804 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d914      	bls.n	8002778 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10d      	bne.n	8002778 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0210 	orr.w	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e007      	b.n	8002788 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d0dc      	beq.n	8002740 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0ed      	b.n	800297e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fede 	bl	8001570 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff f81e 	bl	8001804 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027ca:	e012      	b.n	80027f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027cc:	f7ff f81a 	bl	8001804 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d90b      	bls.n	80027f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0c5      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0e5      	beq.n	80027cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0202 	bic.w	r2, r2, #2
 800280e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7fe fff8 	bl	8001804 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002816:	e012      	b.n	800283e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7fe fff4 	bl	8001804 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e09f      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e007      	b.n	80028ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0220 	bic.w	r2, r2, #32
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7edb      	ldrb	r3, [r3, #27]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0210 	bic.w	r2, r2, #16
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0210 	orr.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f5b      	ldrb	r3, [r3, #29]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0204 	orr.w	r2, r2, #4
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e007      	b.n	8002948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d003      	beq.n	80029ac <HAL_CAN_ConfigFilter+0x26>
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80aa 	bne.w	8002b00 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2201      	movs	r2, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d123      	bne.n	8002a2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3248      	adds	r2, #72	@ 0x48
 8002a0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a24:	6979      	ldr	r1, [r7, #20]
 8002a26:	3348      	adds	r3, #72	@ 0x48
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d122      	bne.n	8002a7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3248      	adds	r2, #72	@ 0x48
 8002a5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a72:	6979      	ldr	r1, [r7, #20]
 8002a74:	3348      	adds	r3, #72	@ 0x48
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002a96:	e007      	b.n	8002aa8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002ac2:	e007      	b.n	8002ad4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002af2:	f023 0201 	bic.w	r2, r3, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e006      	b.n	8002b0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d12e      	bne.n	8002b8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b46:	f7fe fe5d 	bl	8001804 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b4c:	e012      	b.n	8002b74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b4e:	f7fe fe59 	bl	8001804 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b0a      	cmp	r3, #10
 8002b5a:	d90b      	bls.n	8002b74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e012      	b.n	8002b9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e006      	b.n	8002b9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b089      	sub	sp, #36	@ 0x24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc0:	7ffb      	ldrb	r3, [r7, #31]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d003      	beq.n	8002bce <HAL_CAN_AddTxMessage+0x2c>
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	f040 80ad 	bne.w	8002d28 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8095 	beq.w	8002d18 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	0e1b      	lsrs	r3, r3, #24
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	6809      	ldr	r1, [r1, #0]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3318      	adds	r3, #24
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	440b      	add	r3, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e00f      	b.n	8002c46 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3318      	adds	r3, #24
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	440b      	add	r3, r1
 8002c44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3318      	adds	r3, #24
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	440b      	add	r3, r1
 8002c56:	3304      	adds	r3, #4
 8002c58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	7d1b      	ldrb	r3, [r3, #20]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d111      	bne.n	8002c86 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3318      	adds	r3, #24
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	440b      	add	r3, r1
 8002c82:	3304      	adds	r3, #4
 8002c84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	061a      	lsls	r2, r3, #24
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3306      	adds	r3, #6
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3305      	adds	r3, #5
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	3204      	adds	r2, #4
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	ea43 0200 	orr.w	r2, r3, r0
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002cbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3303      	adds	r3, #3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	061a      	lsls	r2, r3, #24
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	4610      	mov	r0, r2
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6811      	ldr	r1, [r2, #0]
 8002ce4:	ea43 0200 	orr.w	r2, r3, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002cf2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	440b      	add	r3, r1
 8002d12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e00e      	b.n	8002d36 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e006      	b.n	8002d36 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	@ (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	@ (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	@ (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff4c 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec6:	f7ff ff61 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7ff ffb1 	bl	8002e38 <NVIC_EncodePriority>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff80 	bl	8002de4 <__NVIC_SetPriority>
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff54 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f16:	e154      	b.n	80031c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8146 	beq.w	80031bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_GPIO_Init+0x40>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d130      	bne.n	8002faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7e:	2201      	movs	r2, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0201 	and.w	r2, r3, #1
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d017      	beq.n	8002fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d123      	bne.n	800303a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	08da      	lsrs	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	6939      	ldr	r1, [r7, #16]
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0203 	and.w	r2, r3, #3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a0 	beq.w	80031bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307c:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_GPIO_Init+0x2d8>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_GPIO_Init+0x2d8>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6193      	str	r3, [r2, #24]
 8003088:	4b55      	ldr	r3, [pc, #340]	@ (80031e0 <HAL_GPIO_Init+0x2d8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003094:	4a53      	ldr	r2, [pc, #332]	@ (80031e4 <HAL_GPIO_Init+0x2dc>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030be:	d019      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a49      	ldr	r2, [pc, #292]	@ (80031e8 <HAL_GPIO_Init+0x2e0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a48      	ldr	r2, [pc, #288]	@ (80031ec <HAL_GPIO_Init+0x2e4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <HAL_GPIO_Init+0x2e8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_Init+0x1e0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a46      	ldr	r2, [pc, #280]	@ (80031f4 <HAL_GPIO_Init+0x2ec>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e008      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030e4:	2305      	movs	r3, #5
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030e8:	2303      	movs	r3, #3
 80030ea:	e004      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f4:	2300      	movs	r3, #0
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	f002 0203 	and.w	r2, r2, #3
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	4093      	lsls	r3, r2
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003106:	4937      	ldr	r1, [pc, #220]	@ (80031e4 <HAL_GPIO_Init+0x2dc>)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003114:	4b38      	ldr	r3, [pc, #224]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003138:	4a2f      	ldr	r2, [pc, #188]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313e:	4b2e      	ldr	r3, [pc, #184]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003162:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003168:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800318c:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003192:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031b6:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3301      	adds	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f47f aea3 	bne.w	8002f18 <HAL_GPIO_Init+0x10>
  }
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	48000400 	.word	0x48000400
 80031ec:	48000800 	.word	0x48000800
 80031f0:	48000c00 	.word	0x48000c00
 80031f4:	48001000 	.word	0x48001000
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e001      	b.n	800321e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003248:	e002      	b.n	8003250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003262:	af00      	add	r7, sp, #0
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f001 b823 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 817d 	beq.w	8003592 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003298:	4bbc      	ldr	r3, [pc, #752]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d00c      	beq.n	80032be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a4:	4bb9      	ldr	r3, [pc, #740]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d15c      	bne.n	800336a <HAL_RCC_OscConfig+0x10e>
 80032b0:	4bb6      	ldr	r3, [pc, #728]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032bc:	d155      	bne.n	800336a <HAL_RCC_OscConfig+0x10e>
 80032be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0x94>
 80032ea:	4ba8      	ldr	r3, [pc, #672]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0xc0>
 80032f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003308:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800330c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003318:	4b9c      	ldr	r3, [pc, #624]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003320:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003324:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003328:	fa92 f2a2 	rbit	r2, r2
 800332c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003330:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f042 0220 	orr.w	r2, r2, #32
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f002 021f 	and.w	r2, r2, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 811f 	beq.w	8003590 <HAL_RCC_OscConfig+0x334>
 8003352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003356:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8116 	bne.w	8003590 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f000 bfaf 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x12e>
 800337c:	4b83      	ldr	r3, [pc, #524]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a82      	ldr	r2, [pc, #520]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e036      	b.n	80033f8 <HAL_RCC_OscConfig+0x19c>
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x158>
 800339a:	4b7c      	ldr	r3, [pc, #496]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7b      	ldr	r2, [pc, #492]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b79      	ldr	r3, [pc, #484]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a78      	ldr	r2, [pc, #480]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e021      	b.n	80033f8 <HAL_RCC_OscConfig+0x19c>
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x184>
 80033c6:	4b71      	ldr	r3, [pc, #452]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a70      	ldr	r2, [pc, #448]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6e      	ldr	r3, [pc, #440]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6d      	ldr	r2, [pc, #436]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x19c>
 80033e0:	4b6a      	ldr	r3, [pc, #424]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a69      	ldr	r2, [pc, #420]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b67      	ldr	r3, [pc, #412]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a66      	ldr	r2, [pc, #408]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033f8:	4b64      	ldr	r3, [pc, #400]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	f023 020f 	bic.w	r2, r3, #15
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	495f      	ldr	r1, [pc, #380]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800340e:	4313      	orrs	r3, r2
 8003410:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d059      	beq.n	80034d6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe f9ef 	bl	8001804 <HAL_GetTick>
 8003426:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe f9ea 	bl	8001804 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	@ 0x64
 800343a:	d902      	bls.n	8003442 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	f000 bf43 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003442:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003446:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003456:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_RCC_OscConfig+0x218>
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	e015      	b.n	80034a0 <HAL_RCC_OscConfig+0x244>
 8003474:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003478:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800348c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003490:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800349c:	4b3b      	ldr	r3, [pc, #236]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034a4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80034a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80034ac:	fa92 f2a2 	rbit	r2, r2
 80034b0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80034b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80034b8:	fab2 f282 	clz	r2, r2
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f042 0220 	orr.w	r2, r2, #32
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f002 021f 	and.w	r2, r2, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f202 	lsl.w	r2, r1, r2
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ab      	beq.n	800342c <HAL_RCC_OscConfig+0x1d0>
 80034d4:	e05d      	b.n	8003592 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe f995 	bl	8001804 <HAL_GetTick>
 80034da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe f990 	bl	8001804 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	@ 0x64
 80034ee:	d902      	bls.n	80034f6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	f000 bee9 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 80034f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034fa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800350a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_RCC_OscConfig+0x2cc>
 8003522:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e015      	b.n	8003554 <HAL_RCC_OscConfig+0x2f8>
 8003528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800352c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800353c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003540:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003544:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003550:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <HAL_RCC_OscConfig+0x330>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003558:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800355c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003568:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ab      	bne.n	80034e0 <HAL_RCC_OscConfig+0x284>
 8003588:	e003      	b.n	8003592 <HAL_RCC_OscConfig+0x336>
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 817d 	beq.w	80038a2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035a8:	4ba6      	ldr	r3, [pc, #664]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035b4:	4ba3      	ldr	r3, [pc, #652]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d172      	bne.n	80036a6 <HAL_RCC_OscConfig+0x44a>
 80035c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d16c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x44a>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80035de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x3a0>
 80035f6:	4b93      	ldr	r3, [pc, #588]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e013      	b.n	8003624 <HAL_RCC_OscConfig+0x3c8>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800360e:	2302      	movs	r3, #2
 8003610:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003614:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003620:	4b88      	ldr	r3, [pc, #544]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	2202      	movs	r2, #2
 8003626:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800362a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003636:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCC_OscConfig+0x410>
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d002      	beq.n	800366c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f000 be2e 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b75      	ldr	r3, [pc, #468]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003678:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	21f8      	movs	r1, #248	@ 0xf8
 8003682:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800368a:	fa91 f1a1 	rbit	r1, r1
 800368e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003692:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003696:	fab1 f181 	clz	r1, r1
 800369a:	b2c9      	uxtb	r1, r1
 800369c:	408b      	lsls	r3, r1
 800369e:	4969      	ldr	r1, [pc, #420]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a4:	e0fd      	b.n	80038a2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8088 	beq.w	80037c8 <HAL_RCC_OscConfig+0x56c>
 80036b8:	2301      	movs	r3, #1
 80036ba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2301      	movs	r3, #1
 80036e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f88e 	bl	8001804 <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe f889 	bl	8001804 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	f000 bde2 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003704:	2302      	movs	r3, #2
 8003706:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003716:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d102      	bne.n	8003734 <HAL_RCC_OscConfig+0x4d8>
 800372e:	4b45      	ldr	r3, [pc, #276]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	e013      	b.n	800375c <HAL_RCC_OscConfig+0x500>
 8003734:	2302      	movs	r3, #2
 8003736:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003746:	2302      	movs	r3, #2
 8003748:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800374c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003758:	4b3a      	ldr	r3, [pc, #232]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	2202      	movs	r2, #2
 800375e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003762:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800376e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f042 0220 	orr.w	r2, r2, #32
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f002 021f 	and.w	r2, r2, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f202 	lsl.w	r2, r1, r2
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0af      	beq.n	80036ee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	21f8      	movs	r1, #248	@ 0xf8
 80037a4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80037ac:	fa91 f1a1 	rbit	r1, r1
 80037b0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80037b4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80037b8:	fab1 f181 	clz	r1, r1
 80037bc:	b2c9      	uxtb	r1, r1
 80037be:	408b      	lsls	r3, r1
 80037c0:	4920      	ldr	r1, [pc, #128]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
 80037c6:	e06c      	b.n	80038a2 <HAL_RCC_OscConfig+0x646>
 80037c8:	2301      	movs	r3, #1
 80037ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80037da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe f806 	bl	8001804 <HAL_GetTick>
 80037f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fe f801 	bl	8001804 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d902      	bls.n	8003814 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	f000 bd5a 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003814:	2302      	movs	r3, #2
 8003816:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003826:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d104      	bne.n	8003848 <HAL_RCC_OscConfig+0x5ec>
 800383e:	4b01      	ldr	r3, [pc, #4]	@ (8003844 <HAL_RCC_OscConfig+0x5e8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	e015      	b.n	8003870 <HAL_RCC_OscConfig+0x614>
 8003844:	40021000 	.word	0x40021000
 8003848:	2302      	movs	r3, #2
 800384a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003860:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800386c:	4bc8      	ldr	r3, [pc, #800]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	2202      	movs	r2, #2
 8003872:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003876:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003882:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f042 0220 	orr.w	r2, r2, #32
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f002 021f 	and.w	r2, r2, #31
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ad      	bne.n	80037fe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8110 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d079      	beq.n	80039bc <HAL_RCC_OscConfig+0x760>
 80038c8:	2301      	movs	r3, #1
 80038ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	4bab      	ldr	r3, [pc, #684]	@ (8003b94 <HAL_RCC_OscConfig+0x938>)
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	461a      	mov	r2, r3
 80038ee:	2301      	movs	r3, #1
 80038f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff87 	bl	8001804 <HAL_GetTick>
 80038f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd ff82 	bl	8001804 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	f000 bcdb 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003912:	2302      	movs	r3, #2
 8003914:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003928:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800396a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	4b88      	ldr	r3, [pc, #544]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 800396e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003978:	2102      	movs	r1, #2
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fa93 f1a3 	rbit	r1, r3
 800398a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003992:	6019      	str	r1, [r3, #0]
  return result;
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0a0      	beq.n	80038fc <HAL_RCC_OscConfig+0x6a0>
 80039ba:	e08d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x87c>
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_OscConfig+0x938>)
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	461a      	mov	r2, r3
 80039fa:	2300      	movs	r3, #0
 80039fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fd ff01 	bl	8001804 <HAL_GetTick>
 8003a02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fd fefc 	bl	8001804 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d902      	bls.n	8003a1e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	f000 bc55 	b.w	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a26:	2202      	movs	r2, #2
 8003a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fa93 f2a3 	rbit	r2, r3
 8003a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a6e:	2202      	movs	r2, #2
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a96:	2102      	movs	r1, #2
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f1a3 	rbit	r1, r3
 8003aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ab0:	6019      	str	r1, [r3, #0]
  return result;
 8003ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d197      	bne.n	8003a08 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003adc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 81a1 	beq.w	8003e30 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d116      	bne.n	8003b2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <HAL_RCC_OscConfig+0x93c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11a      	bne.n	8003b70 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <HAL_RCC_OscConfig+0x93c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a16      	ldr	r2, [pc, #88]	@ (8003b98 <HAL_RCC_OscConfig+0x93c>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fe5d 	bl	8001804 <HAL_GetTick>
 8003b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	e009      	b.n	8003b64 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b50:	f7fd fe58 	bl	8001804 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b64      	cmp	r3, #100	@ 0x64
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e3b1      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_RCC_OscConfig+0x93c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10d      	bne.n	8003b9c <HAL_RCC_OscConfig+0x940>
 8003b80:	4b03      	ldr	r3, [pc, #12]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a02      	ldr	r2, [pc, #8]	@ (8003b90 <HAL_RCC_OscConfig+0x934>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e03c      	b.n	8003c08 <HAL_RCC_OscConfig+0x9ac>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	10908120 	.word	0x10908120
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x96a>
 8003bac:	4bc1      	ldr	r3, [pc, #772]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4ac0      	ldr	r2, [pc, #768]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	4bbe      	ldr	r3, [pc, #760]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4abd      	ldr	r2, [pc, #756]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	6213      	str	r3, [r2, #32]
 8003bc4:	e020      	b.n	8003c08 <HAL_RCC_OscConfig+0x9ac>
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x994>
 8003bd6:	4bb7      	ldr	r3, [pc, #732]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4ab6      	ldr	r2, [pc, #728]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4bb4      	ldr	r3, [pc, #720]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4ab3      	ldr	r2, [pc, #716]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0x9ac>
 8003bf0:	4bb0      	ldr	r3, [pc, #704]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4aaf      	ldr	r2, [pc, #700]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	4bad      	ldr	r3, [pc, #692]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4aac      	ldr	r2, [pc, #688]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8081 	beq.w	8003d1c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd fdf3 	bl	8001804 <HAL_GetTick>
 8003c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd fdee 	bl	8001804 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e345      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c40:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c68:	2202      	movs	r2, #2
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c82:	601a      	str	r2, [r3, #0]
  return result;
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xa4c>
 8003ca2:	4b84      	ldr	r3, [pc, #528]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCC_OscConfig+0xa74>
 8003ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	fa93 f2a3 	rbit	r2, r3
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	4b79      	ldr	r3, [pc, #484]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cd4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cd8:	2102      	movs	r1, #2
 8003cda:	6011      	str	r1, [r2, #0]
 8003cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ce0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	fa92 f1a2 	rbit	r1, r2
 8003cea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cee:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cf2:	6011      	str	r1, [r2, #0]
  return result;
 8003cf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cf8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d084      	beq.n	8003c24 <HAL_RCC_OscConfig+0x9c8>
 8003d1a:	e07f      	b.n	8003e1c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fd72 	bl	8001804 <HAL_GetTick>
 8003d20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00b      	b.n	8003d3e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fd fd6d 	bl	8001804 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e2c4      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d46:	2202      	movs	r2, #2
 8003d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f2a3 	rbit	r2, r3
 8003d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d84:	601a      	str	r2, [r3, #0]
  return result;
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d102      	bne.n	8003daa <HAL_RCC_OscConfig+0xb4e>
 8003da4:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	e013      	b.n	8003dd2 <HAL_RCC_OscConfig+0xb76>
 8003daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003db2:	2202      	movs	r2, #2
 8003db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f2a3 	rbit	r2, r3
 8003dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dda:	2102      	movs	r1, #2
 8003ddc:	6011      	str	r1, [r2, #0]
 8003dde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fa92 f1a2 	rbit	r1, r2
 8003dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003df0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003df4:	6011      	str	r1, [r2, #0]
  return result;
 8003df6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dfa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	f002 021f 	and.w	r2, r2, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f202 	lsl.w	r2, r1, r2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d184      	bne.n	8003d26 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e1c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8242 	beq.w	80042c6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e42:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <HAL_RCC_OscConfig+0xc58>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	f000 8213 	beq.w	8004276 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f040 8162 	bne.w	8004126 <HAL_RCC_OscConfig+0xeca>
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e74:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	fa93 f2a3 	rbit	r2, r3
 8003e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e86:	601a      	str	r2, [r3, #0]
  return result;
 8003e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e90:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fcac 	bl	8001804 <HAL_GetTick>
 8003eac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb0:	e00c      	b.n	8003ecc <HAL_RCC_OscConfig+0xc70>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fd fca4 	bl	8001804 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1fd      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
 8003ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ede:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ef0:	601a      	str	r2, [r3, #0]
  return result;
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003efa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCC_OscConfig+0xcba>
 8003f10:	4bb0      	ldr	r3, [pc, #704]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	e027      	b.n	8003f66 <HAL_RCC_OscConfig+0xd0a>
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	fa93 f2a3 	rbit	r2, r3
 8003f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f36:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4b9c      	ldr	r3, [pc, #624]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f6a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f72:	6011      	str	r1, [r2, #0]
 8003f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f78:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	fa92 f1a2 	rbit	r1, r2
 8003f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f86:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f8a:	6011      	str	r1, [r2, #0]
  return result;
 8003f8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f90:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f042 0220 	orr.w	r2, r2, #32
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f002 021f 	and.w	r2, r2, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d182      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb2:	4b88      	ldr	r3, [pc, #544]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	497f      	ldr	r1, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
 8003fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fde:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fe2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004008:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004014:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	461a      	mov	r2, r3
 800401c:	2301      	movs	r3, #1
 800401e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd fbf0 	bl	8001804 <HAL_GetTick>
 8004024:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004028:	e009      	b.n	800403e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd fbeb 	bl	8001804 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e144      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004046:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800404a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004062:	601a      	str	r2, [r3, #0]
  return result;
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800406c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d102      	bne.n	8004088 <HAL_RCC_OscConfig+0xe2c>
 8004082:	4b54      	ldr	r3, [pc, #336]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	e027      	b.n	80040d8 <HAL_RCC_OscConfig+0xe7c>
 8004088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004090:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	fa93 f2a3 	rbit	r2, r3
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fa93 f2a3 	rbit	r2, r3
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040dc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040e4:	6011      	str	r1, [r2, #0]
 80040e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ea:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	fa92 f1a2 	rbit	r1, r2
 80040f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040fc:	6011      	str	r1, [r2, #0]
  return result;
 80040fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004102:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f002 021f 	and.w	r2, r2, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f202 	lsl.w	r2, r1, r2
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d082      	beq.n	800402a <HAL_RCC_OscConfig+0xdce>
 8004124:	e0cf      	b.n	80042c6 <HAL_RCC_OscConfig+0x106a>
 8004126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800412e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004146:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800414a:	601a      	str	r2, [r3, #0]
  return result;
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004154:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004160:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fd fb4a 	bl	8001804 <HAL_GetTick>
 8004170:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	e009      	b.n	800418a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fd fb45 	bl	8001804 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e09e      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004192:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	fa93 f2a3 	rbit	r2, r3
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041ae:	601a      	str	r2, [r3, #0]
  return result;
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d104      	bne.n	80041d8 <HAL_RCC_OscConfig+0xf7c>
 80041ce:	4b01      	ldr	r3, [pc, #4]	@ (80041d4 <HAL_RCC_OscConfig+0xf78>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	e029      	b.n	8004228 <HAL_RCC_OscConfig+0xfcc>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041dc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f2a3 	rbit	r2, r3
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004202:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004206:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	fa93 f2a3 	rbit	r2, r3
 800421a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <HAL_RCC_OscConfig+0x1078>)
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800422c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004230:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004234:	6011      	str	r1, [r2, #0]
 8004236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800423a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	fa92 f1a2 	rbit	r1, r2
 8004244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004248:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800424c:	6011      	str	r1, [r2, #0]
  return result;
 800424e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004252:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f002 021f 	and.w	r2, r2, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f202 	lsl.w	r2, r1, r2
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d180      	bne.n	8004176 <HAL_RCC_OscConfig+0xf1a>
 8004274:	e027      	b.n	80042c6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e01e      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800428a:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_RCC_OscConfig+0x1078>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004292:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004296:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80042ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042be:	429a      	cmp	r2, r3
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b09e      	sub	sp, #120	@ 0x78
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e162      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b90      	ldr	r3, [pc, #576]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d910      	bls.n	8004320 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	498b      	ldr	r1, [pc, #556]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e14a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432c:	4b82      	ldr	r3, [pc, #520]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	497f      	ldr	r1, [pc, #508]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80dc 	beq.w	8004504 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d13c      	bne.n	80043ce <HAL_RCC_ClockConfig+0xf6>
 8004354:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004358:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_RCC_ClockConfig+0xa6>
 8004378:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	e00f      	b.n	800439e <HAL_RCC_ClockConfig+0xc6>
 800437e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004382:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	667b      	str	r3, [r7, #100]	@ 0x64
 800438c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
 8004392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439a:	4b67      	ldr	r3, [pc, #412]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043a6:	fa92 f2a2 	rbit	r2, r2
 80043aa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80043ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043ae:	fab2 f282 	clz	r2, r2
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	f042 0220 	orr.w	r2, r2, #32
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	f002 021f 	and.w	r2, r2, #31
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d17b      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0f3      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d13c      	bne.n	8004450 <HAL_RCC_ClockConfig+0x178>
 80043d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_ClockConfig+0x128>
 80043fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	e00f      	b.n	8004420 <HAL_RCC_ClockConfig+0x148>
 8004400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004412:	643b      	str	r3, [r7, #64]	@ 0x40
 8004414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004424:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004428:	fa92 f2a2 	rbit	r2, r2
 800442c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800442e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f042 0220 	orr.w	r2, r2, #32
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f002 021f 	and.w	r2, r2, #31
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f202 	lsl.w	r2, r1, r2
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13a      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b2      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
 8004450:	2302      	movs	r3, #2
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
 8004472:	4b31      	ldr	r3, [pc, #196]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	e00d      	b.n	8004494 <HAL_RCC_ClockConfig+0x1bc>
 8004478:	2302      	movs	r3, #2
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	2302      	movs	r3, #2
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	4b29      	ldr	r3, [pc, #164]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2202      	movs	r2, #2
 8004496:	61ba      	str	r2, [r7, #24]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	fa92 f2a2 	rbit	r2, r2
 800449e:	617a      	str	r2, [r7, #20]
  return result;
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	fab2 f282 	clz	r2, r2
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f042 0220 	orr.w	r2, r2, #32
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	f002 021f 	and.w	r2, r2, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e079      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	491a      	ldr	r1, [pc, #104]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d4:	f7fd f996 	bl	8001804 <HAL_GetTick>
 80044d8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fd f992 	bl	8001804 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e061      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d214      	bcs.n	800453c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4906      	ldr	r1, [pc, #24]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e040      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
 8004534:	40022000 	.word	0x40022000
 8004538:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	491a      	ldr	r1, [pc, #104]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4912      	ldr	r1, [pc, #72]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800457a:	f000 f829 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004588:	22f0      	movs	r2, #240	@ 0xf0
 800458a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	fa92 f2a2 	rbit	r2, r2
 8004592:	60fa      	str	r2, [r7, #12]
  return result;
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	fab2 f282 	clz	r2, r2
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	40d3      	lsrs	r3, r2
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_RCC_ClockConfig+0x2ec>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	fa21 f303 	lsr.w	r3, r1, r3
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <HAL_RCC_ClockConfig+0x2f0>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045aa:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <HAL_RCC_ClockConfig+0x2f4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd f822 	bl	80015f8 <HAL_InitTick>
  
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3778      	adds	r7, #120	@ 0x78
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	080065c0 	.word	0x080065c0
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000008 	.word	0x20000008

080045d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x94>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x30>
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x36>
 80045fe:	e026      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004602:	613b      	str	r3, [r7, #16]
      break;
 8004604:	e026      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	4a17      	ldr	r2, [pc, #92]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x94>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xa0>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800462c:	4a0e      	ldr	r2, [pc, #56]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	fbb2 f2f3 	udiv	r2, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e004      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0c      	ldr	r2, [pc, #48]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	613b      	str	r3, [r7, #16]
      break;
 800464c:	e002      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800464e:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004650:	613b      	str	r3, [r7, #16]
      break;
 8004652:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004654:	693b      	ldr	r3, [r7, #16]
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	007a1200 	.word	0x007a1200
 800466c:	080065d8 	.word	0x080065d8
 8004670:	080065e8 	.word	0x080065e8
 8004674:	003d0900 	.word	0x003d0900

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004696:	f7ff ffef 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 800469a:	4601      	mov	r1, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046a4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80046a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	fa92 f2a2 	rbit	r2, r2
 80046b0:	603a      	str	r2, [r7, #0]
  return result;
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	40d3      	lsrs	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	@ (80046d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	080065d0 	.word	0x080065d0

080046d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	220f      	movs	r2, #15
 80046e2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046e4:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80046f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80046fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <HAL_RCC_GetClockConfig+0x60>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000
 8004734:	40022000 	.word	0x40022000

08004738 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b092      	sub	sp, #72	@ 0x48
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80d4 	beq.w	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475c:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10e      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b4b      	ldr	r3, [pc, #300]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4a4a      	ldr	r2, [pc, #296]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004772:	61d3      	str	r3, [r2, #28]
 8004774:	4b48      	ldr	r3, [pc, #288]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004786:	4b45      	ldr	r3, [pc, #276]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d118      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004792:	4b42      	ldr	r3, [pc, #264]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a41      	ldr	r2, [pc, #260]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479e:	f7fd f831 	bl	8001804 <HAL_GetTick>
 80047a2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	e008      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fd f82d 	bl	8001804 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b64      	cmp	r3, #100	@ 0x64
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e169      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	4b38      	ldr	r3, [pc, #224]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c4:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8084 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d07c      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	4b26      	ldr	r3, [pc, #152]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	461a      	mov	r2, r3
 800480e:	2301      	movs	r3, #1
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004836:	4a18      	ldr	r2, [pc, #96]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800483c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04b      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fc ffdd 	bl	8001804 <HAL_GetTick>
 800484a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fc ffd9 	bl	8001804 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e113      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004864:	2302      	movs	r3, #2
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	2302      	movs	r3, #2
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
  return result;
 800487c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d108      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004892:	4b01      	ldr	r3, [pc, #4]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	e00d      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	10908100 	.word	0x10908100
 80048a4:	2302      	movs	r3, #2
 80048a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	4b78      	ldr	r3, [pc, #480]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	2202      	movs	r2, #2
 80048b6:	613a      	str	r2, [r7, #16]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	fa92 f2a2 	rbit	r2, r2
 80048be:	60fa      	str	r2, [r7, #12]
  return result;
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	fab2 f282 	clz	r2, r2
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	f002 021f 	and.w	r2, r2, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f202 	lsl.w	r2, r1, r2
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0b7      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048de:	4b6d      	ldr	r3, [pc, #436]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	496a      	ldr	r1, [pc, #424]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f8:	4b66      	ldr	r3, [pc, #408]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4a65      	ldr	r2, [pc, #404]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004902:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004910:	4b60      	ldr	r3, [pc, #384]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f023 0203 	bic.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	495d      	ldr	r1, [pc, #372]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492e:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4956      	ldr	r1, [pc, #344]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800494c:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	494e      	ldr	r1, [pc, #312]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f023 0210 	bic.w	r2, r3, #16
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4947      	ldr	r1, [pc, #284]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004988:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	493f      	ldr	r1, [pc, #252]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	f023 0220 	bic.w	r2, r3, #32
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4938      	ldr	r1, [pc, #224]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c4:	4b33      	ldr	r3, [pc, #204]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4930      	ldr	r1, [pc, #192]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	4929      	ldr	r1, [pc, #164]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a00:	4b24      	ldr	r3, [pc, #144]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	4921      	ldr	r1, [pc, #132]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	491a      	ldr	r1, [pc, #104]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a3c:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	4912      	ldr	r1, [pc, #72]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	490b      	ldr	r1, [pc, #44]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	4903      	ldr	r1, [pc, #12]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3748      	adds	r7, #72	@ 0x48
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e049      	b.n	8004b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f841 	bl	8004b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 f9d4 	bl	8004e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d001      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04a      	b.n	8004c0a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a21      	ldr	r2, [pc, #132]	@ (8004c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d018      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9e:	d013      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d115      	bne.n	8004bf4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	4b17      	ldr	r3, [pc, #92]	@ (8004c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d015      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0xaa>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be0:	d011      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	e008      	b.n	8004c06 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40013400 	.word	0x40013400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	00010007 	.word	0x00010007

08004c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d020      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0202 	mvn.w	r2, #2
 8004c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8e4 	bl	8004e48 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8d6 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8e7 	bl	8004e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0204 	mvn.w	r2, #4
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8be 	bl	8004e48 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8b0 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8c1 	bl	8004e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0208 	mvn.w	r2, #8
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f898 	bl	8004e48 <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f88a 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f89b 	bl	8004e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d020      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f872 	bl	8004e48 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f864 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f875 	bl	8004e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0201 	mvn.w	r2, #1
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fb3c 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f908 	bl	8004fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f900 	bl	8004fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f834 	bl	8004e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0220 	mvn.w	r2, #32
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8c8 	bl	8004fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a42      	ldr	r2, [pc, #264]	@ (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0x38>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x38>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x38>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8004fac <TIM_Base_SetConfig+0x128>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a33      	ldr	r2, [pc, #204]	@ (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01b      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004edc:	d017      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8004fac <TIM_Base_SetConfig+0x128>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <TIM_Base_SetConfig+0x12c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <TIM_Base_SetConfig+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <TIM_Base_SetConfig+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_Base_SetConfig+0xe8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <TIM_Base_SetConfig+0x128>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0xe8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <TIM_Base_SetConfig+0x12c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0xe8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <TIM_Base_SetConfig+0x130>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0xe8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <TIM_Base_SetConfig+0x134>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d103      	bne.n	8004f74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]
  }
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800

08004fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500a:	2b84      	cmp	r3, #132	@ 0x84
 800500c:	d005      	beq.n	800501a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800500e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	3303      	adds	r3, #3
 8005018:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800502c:	f000 fadc 	bl	80055e8 <vTaskStartScheduler>
  
  return osOK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}

08005036 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005038:	b089      	sub	sp, #36	@ 0x24
 800503a:	af04      	add	r7, sp, #16
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <osThreadCreate+0x54>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01c      	beq.n	800508a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685c      	ldr	r4, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691e      	ldr	r6, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ffc8 	bl	8004ff8 <makeFreeRtosPriority>
 8005068:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005072:	9202      	str	r2, [sp, #8]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4632      	mov	r2, r6
 800507c:	4629      	mov	r1, r5
 800507e:	4620      	mov	r0, r4
 8005080:	f000 f8ed 	bl	800525e <xTaskCreateStatic>
 8005084:	4603      	mov	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e01c      	b.n	80050c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685c      	ldr	r4, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005096:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff ffaa 	bl	8004ff8 <makeFreeRtosPriority>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f107 030c 	add.w	r3, r7, #12
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	9200      	str	r2, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4632      	mov	r2, r6
 80050b2:	4629      	mov	r1, r5
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 f931 	bl	800531c <xTaskCreate>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <osDelay+0x16>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e000      	b.n	80050e6 <osDelay+0x18>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fa48 	bl	800557c <vTaskDelay>
  
  return osOK;
 80050ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f04f 32ff 	mov.w	r2, #4294967295
 800510e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f103 0208 	add.w	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d103      	bne.n	80051b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e00c      	b.n	80051d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3308      	adds	r3, #8
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e002      	b.n	80051c6 <vListInsert+0x2e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d2f6      	bcs.n	80051c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6852      	ldr	r2, [r2, #4]
 800522a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d103      	bne.n	800523e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800525e:	b580      	push	{r7, lr}
 8005260:	b08e      	sub	sp, #56	@ 0x38
 8005262:	af04      	add	r7, sp, #16
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800526c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61fb      	str	r3, [r7, #28]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052a8:	2354      	movs	r3, #84	@ 0x54
 80052aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b54      	cmp	r3, #84	@ 0x54
 80052b0:	d00b      	beq.n	80052ca <xTaskCreateStatic+0x6c>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	61bb      	str	r3, [r7, #24]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <xTaskCreateStatic+0xb0>
 80052d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01b      	beq.n	800530e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052e8:	2300      	movs	r3, #0
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f850 	bl	80053a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005308:	f000 f8ce 	bl	80054a8 <prvAddNewTaskToReadyList>
 800530c:	e001      	b.n	8005312 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005312:	697b      	ldr	r3, [r7, #20]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	@ 0x30
 8005320:	af04      	add	r7, sp, #16
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fed1 	bl	80060d8 <pvPortMalloc>
 8005336:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800533e:	2054      	movs	r0, #84	@ 0x54
 8005340:	f000 feca 	bl	80060d8 <pvPortMalloc>
 8005344:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
 8005352:	e005      	b.n	8005360 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f000 ff87 	bl	8006268 <vPortFree>
 800535a:	e001      	b.n	8005360 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d017      	beq.n	8005396 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	2300      	movs	r3, #0
 8005372:	9303      	str	r3, [sp, #12]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	9302      	str	r3, [sp, #8]
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f80e 	bl	80053a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800538a:	69f8      	ldr	r0, [r7, #28]
 800538c:	f000 f88c 	bl	80054a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e002      	b.n	800539c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800539c:	69bb      	ldr	r3, [r7, #24]
	}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b088      	sub	sp, #32
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053be:	3b01      	subs	r3, #1
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	617b      	str	r3, [r7, #20]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e012      	b.n	800541c <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	7819      	ldrb	r1, [r3, #0]
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	3334      	adds	r3, #52	@ 0x34
 8005406:	460a      	mov	r2, r1
 8005408:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d9e9      	bls.n	80053f6 <prvInitialiseNewTask+0x50>
 8005422:	e000      	b.n	8005426 <prvInitialiseNewTask+0x80>
		{
			break;
 8005424:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	2b06      	cmp	r3, #6
 8005432:	d901      	bls.n	8005438 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005434:	2306      	movs	r3, #6
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fe71 	bl	8005136 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	3318      	adds	r3, #24
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff fe6c 	bl	8005136 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	f1c3 0207 	rsb	r2, r3, #7
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	2200      	movs	r2, #0
 8005478:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	69b8      	ldr	r0, [r7, #24]
 8005488:	f000 fc18 	bl	8005cbc <pxPortInitialiseStack>
 800548c:	4602      	mov	r2, r0
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549e:	bf00      	nop
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054b0:	f000 fd32 	bl	8005f18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005560 <prvAddNewTaskToReadyList+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	4a29      	ldr	r2, [pc, #164]	@ (8005560 <prvAddNewTaskToReadyList+0xb8>)
 80054bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054be:	4b29      	ldr	r3, [pc, #164]	@ (8005564 <prvAddNewTaskToReadyList+0xbc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054c6:	4a27      	ldr	r2, [pc, #156]	@ (8005564 <prvAddNewTaskToReadyList+0xbc>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054cc:	4b24      	ldr	r3, [pc, #144]	@ (8005560 <prvAddNewTaskToReadyList+0xb8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d110      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054d4:	f000 fac8 	bl	8005a68 <prvInitialiseTaskLists>
 80054d8:	e00d      	b.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054da:	4b23      	ldr	r3, [pc, #140]	@ (8005568 <prvAddNewTaskToReadyList+0xc0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054e2:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <prvAddNewTaskToReadyList+0xbc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d802      	bhi.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <prvAddNewTaskToReadyList+0xbc>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054f6:	4b1d      	ldr	r3, [pc, #116]	@ (800556c <prvAddNewTaskToReadyList+0xc4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <prvAddNewTaskToReadyList+0xc4>)
 80054fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <prvAddNewTaskToReadyList+0xc8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4313      	orrs	r3, r2
 800550e:	4a18      	ldr	r2, [pc, #96]	@ (8005570 <prvAddNewTaskToReadyList+0xc8>)
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <prvAddNewTaskToReadyList+0xcc>)
 8005520:	441a      	add	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7ff fe11 	bl	8005150 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800552e:	f000 fd25 	bl	8005f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <prvAddNewTaskToReadyList+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <prvAddNewTaskToReadyList+0xbc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	429a      	cmp	r2, r3
 8005546:	d207      	bcs.n	8005558 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <prvAddNewTaskToReadyList+0xd0>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000544 	.word	0x20000544
 8005564:	20000444 	.word	0x20000444
 8005568:	20000550 	.word	0x20000550
 800556c:	20000560 	.word	0x20000560
 8005570:	2000054c 	.word	0x2000054c
 8005574:	20000448 	.word	0x20000448
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800558e:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <vTaskDelay+0x64>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <vTaskDelay+0x32>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60bb      	str	r3, [r7, #8]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055ae:	f000 f87d 	bl	80056ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055b2:	2100      	movs	r1, #0
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fb1b 	bl	8005bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055ba:	f000 f885 	bl	80056c8 <xTaskResumeAll>
 80055be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055c6:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <vTaskDelay+0x68>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2000056c 	.word	0x2000056c
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	@ 0x28
 80055ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055f6:	463a      	mov	r2, r7
 80055f8:	1d39      	adds	r1, r7, #4
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fa fde6 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	460a      	mov	r2, r1
 8005616:	491f      	ldr	r1, [pc, #124]	@ (8005694 <vTaskStartScheduler+0xac>)
 8005618:	481f      	ldr	r0, [pc, #124]	@ (8005698 <vTaskStartScheduler+0xb0>)
 800561a:	f7ff fe20 	bl	800525e <xTaskCreateStatic>
 800561e:	4603      	mov	r3, r0
 8005620:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <vTaskStartScheduler+0xb4>)
 8005622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005624:	4b1d      	ldr	r3, [pc, #116]	@ (800569c <vTaskStartScheduler+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e001      	b.n	8005636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d116      	bne.n	800566a <vTaskStartScheduler+0x82>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	613b      	str	r3, [r7, #16]
}
 800564e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005650:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <vTaskStartScheduler+0xb8>)
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005658:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <vTaskStartScheduler+0xbc>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <vTaskStartScheduler+0xc0>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005664:	f000 fbb4 	bl	8005dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005668:	e00f      	b.n	800568a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d10b      	bne.n	800568a <vTaskStartScheduler+0xa2>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60fb      	str	r3, [r7, #12]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <vTaskStartScheduler+0x9e>
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	080065b8 	.word	0x080065b8
 8005698:	08005a39 	.word	0x08005a39
 800569c:	20000568 	.word	0x20000568
 80056a0:	20000564 	.word	0x20000564
 80056a4:	20000550 	.word	0x20000550
 80056a8:	20000548 	.word	0x20000548

080056ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056b0:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <vTaskSuspendAll+0x18>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a03      	ldr	r2, [pc, #12]	@ (80056c4 <vTaskSuspendAll+0x18>)
 80056b8:	6013      	str	r3, [r2, #0]
}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	2000056c 	.word	0x2000056c

080056c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056d6:	4b42      	ldr	r3, [pc, #264]	@ (80057e0 <xTaskResumeAll+0x118>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	603b      	str	r3, [r7, #0]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056f6:	f000 fc0f 	bl	8005f18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056fa:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <xTaskResumeAll+0x118>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3b01      	subs	r3, #1
 8005700:	4a37      	ldr	r2, [pc, #220]	@ (80057e0 <xTaskResumeAll+0x118>)
 8005702:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005704:	4b36      	ldr	r3, [pc, #216]	@ (80057e0 <xTaskResumeAll+0x118>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d161      	bne.n	80057d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800570c:	4b35      	ldr	r3, [pc, #212]	@ (80057e4 <xTaskResumeAll+0x11c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05d      	beq.n	80057d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005714:	e02e      	b.n	8005774 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005716:	4b34      	ldr	r3, [pc, #208]	@ (80057e8 <xTaskResumeAll+0x120>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3318      	adds	r3, #24
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fd71 	bl	800520a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3304      	adds	r3, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fd6c 	bl	800520a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	2201      	movs	r2, #1
 8005738:	409a      	lsls	r2, r3
 800573a:	4b2c      	ldr	r3, [pc, #176]	@ (80057ec <xTaskResumeAll+0x124>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	4a2a      	ldr	r2, [pc, #168]	@ (80057ec <xTaskResumeAll+0x124>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <xTaskResumeAll+0x128>)
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7ff fcf8 	bl	8005150 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005764:	4b23      	ldr	r3, [pc, #140]	@ (80057f4 <xTaskResumeAll+0x12c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800576e:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <xTaskResumeAll+0x130>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005774:	4b1c      	ldr	r3, [pc, #112]	@ (80057e8 <xTaskResumeAll+0x120>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1cc      	bne.n	8005716 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005782:	f000 fa0f 	bl	8005ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005786:	4b1d      	ldr	r3, [pc, #116]	@ (80057fc <xTaskResumeAll+0x134>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d010      	beq.n	80057b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005792:	f000 f837 	bl	8005804 <xTaskIncrementTick>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800579c:	4b16      	ldr	r3, [pc, #88]	@ (80057f8 <xTaskResumeAll+0x130>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f1      	bne.n	8005792 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80057ae:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <xTaskResumeAll+0x134>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <xTaskResumeAll+0x130>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <xTaskResumeAll+0x138>)
 80057c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057d0:	f000 fbd4 	bl	8005f7c <vPortExitCritical>

	return xAlreadyYielded;
 80057d4:	68bb      	ldr	r3, [r7, #8]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2000056c 	.word	0x2000056c
 80057e4:	20000544 	.word	0x20000544
 80057e8:	20000504 	.word	0x20000504
 80057ec:	2000054c 	.word	0x2000054c
 80057f0:	20000448 	.word	0x20000448
 80057f4:	20000444 	.word	0x20000444
 80057f8:	20000558 	.word	0x20000558
 80057fc:	20000554 	.word	0x20000554
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580e:	4b51      	ldr	r3, [pc, #324]	@ (8005954 <xTaskIncrementTick+0x150>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 808e 	bne.w	8005934 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005818:	4b4f      	ldr	r3, [pc, #316]	@ (8005958 <xTaskIncrementTick+0x154>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005820:	4a4d      	ldr	r2, [pc, #308]	@ (8005958 <xTaskIncrementTick+0x154>)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d121      	bne.n	8005870 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800582c:	4b4b      	ldr	r3, [pc, #300]	@ (800595c <xTaskIncrementTick+0x158>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	603b      	str	r3, [r7, #0]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xTaskIncrementTick+0x46>
 800584e:	4b43      	ldr	r3, [pc, #268]	@ (800595c <xTaskIncrementTick+0x158>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	4b42      	ldr	r3, [pc, #264]	@ (8005960 <xTaskIncrementTick+0x15c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a40      	ldr	r2, [pc, #256]	@ (800595c <xTaskIncrementTick+0x158>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4a40      	ldr	r2, [pc, #256]	@ (8005960 <xTaskIncrementTick+0x15c>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b40      	ldr	r3, [pc, #256]	@ (8005964 <xTaskIncrementTick+0x160>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a3e      	ldr	r2, [pc, #248]	@ (8005964 <xTaskIncrementTick+0x160>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	f000 f99a 	bl	8005ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005870:	4b3d      	ldr	r3, [pc, #244]	@ (8005968 <xTaskIncrementTick+0x164>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d34d      	bcc.n	8005916 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587a:	4b38      	ldr	r3, [pc, #224]	@ (800595c <xTaskIncrementTick+0x158>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <xTaskIncrementTick+0x84>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <xTaskIncrementTick+0x86>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588e:	4b36      	ldr	r3, [pc, #216]	@ (8005968 <xTaskIncrementTick+0x164>)
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	601a      	str	r2, [r3, #0]
					break;
 8005896:	e03e      	b.n	8005916 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005898:	4b30      	ldr	r3, [pc, #192]	@ (800595c <xTaskIncrementTick+0x158>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d203      	bcs.n	80058b8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005968 <xTaskIncrementTick+0x164>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
						break;
 80058b6:	e02e      	b.n	8005916 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fca4 	bl	800520a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3318      	adds	r3, #24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fc9b 	bl	800520a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	4b23      	ldr	r3, [pc, #140]	@ (800596c <xTaskIncrementTick+0x168>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	4a22      	ldr	r2, [pc, #136]	@ (800596c <xTaskIncrementTick+0x168>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <xTaskIncrementTick+0x16c>)
 80058f4:	441a      	add	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7ff fc27 	bl	8005150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005906:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <xTaskIncrementTick+0x170>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d3b4      	bcc.n	800587a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005914:	e7b1      	b.n	800587a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005916:	4b17      	ldr	r3, [pc, #92]	@ (8005974 <xTaskIncrementTick+0x170>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591c:	4914      	ldr	r1, [pc, #80]	@ (8005970 <xTaskIncrementTick+0x16c>)
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d907      	bls.n	800593e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e004      	b.n	800593e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005934:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <xTaskIncrementTick+0x174>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	4a0f      	ldr	r2, [pc, #60]	@ (8005978 <xTaskIncrementTick+0x174>)
 800593c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800593e:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <xTaskIncrementTick+0x178>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005946:	2301      	movs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	2000056c 	.word	0x2000056c
 8005958:	20000548 	.word	0x20000548
 800595c:	200004fc 	.word	0x200004fc
 8005960:	20000500 	.word	0x20000500
 8005964:	2000055c 	.word	0x2000055c
 8005968:	20000564 	.word	0x20000564
 800596c:	2000054c 	.word	0x2000054c
 8005970:	20000448 	.word	0x20000448
 8005974:	20000444 	.word	0x20000444
 8005978:	20000554 	.word	0x20000554
 800597c:	20000558 	.word	0x20000558

08005980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005986:	4b27      	ldr	r3, [pc, #156]	@ (8005a24 <vTaskSwitchContext+0xa4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800598e:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <vTaskSwitchContext+0xa8>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005994:	e040      	b.n	8005a18 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005996:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <vTaskSwitchContext+0xa8>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800599c:	4b23      	ldr	r3, [pc, #140]	@ (8005a2c <vTaskSwitchContext+0xac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	f1c3 031f 	rsb	r3, r3, #31
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	491f      	ldr	r1, [pc, #124]	@ (8005a30 <vTaskSwitchContext+0xb0>)
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <vTaskSwitchContext+0x5e>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	607b      	str	r3, [r7, #4]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <vTaskSwitchContext+0x5a>
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4a11      	ldr	r2, [pc, #68]	@ (8005a30 <vTaskSwitchContext+0xb0>)
 80059ea:	4413      	add	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3308      	adds	r3, #8
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d104      	bne.n	8005a0e <vTaskSwitchContext+0x8e>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a07      	ldr	r2, [pc, #28]	@ (8005a34 <vTaskSwitchContext+0xb4>)
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	2000056c 	.word	0x2000056c
 8005a28:	20000558 	.word	0x20000558
 8005a2c:	2000054c 	.word	0x2000054c
 8005a30:	20000448 	.word	0x20000448
 8005a34:	20000444 	.word	0x20000444

08005a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a40:	f000 f852 	bl	8005ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a44:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <prvIdleTask+0x28>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d9f9      	bls.n	8005a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <prvIdleTask+0x2c>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a5c:	e7f0      	b.n	8005a40 <prvIdleTask+0x8>
 8005a5e:	bf00      	nop
 8005a60:	20000448 	.word	0x20000448
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	e00c      	b.n	8005a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a12      	ldr	r2, [pc, #72]	@ (8005ac8 <prvInitialiseTaskLists+0x60>)
 8005a80:	4413      	add	r3, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fb37 	bl	80050f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d9ef      	bls.n	8005a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a94:	480d      	ldr	r0, [pc, #52]	@ (8005acc <prvInitialiseTaskLists+0x64>)
 8005a96:	f7ff fb2e 	bl	80050f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a9a:	480d      	ldr	r0, [pc, #52]	@ (8005ad0 <prvInitialiseTaskLists+0x68>)
 8005a9c:	f7ff fb2b 	bl	80050f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005aa0:	480c      	ldr	r0, [pc, #48]	@ (8005ad4 <prvInitialiseTaskLists+0x6c>)
 8005aa2:	f7ff fb28 	bl	80050f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005aa6:	480c      	ldr	r0, [pc, #48]	@ (8005ad8 <prvInitialiseTaskLists+0x70>)
 8005aa8:	f7ff fb25 	bl	80050f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005aac:	480b      	ldr	r0, [pc, #44]	@ (8005adc <prvInitialiseTaskLists+0x74>)
 8005aae:	f7ff fb22 	bl	80050f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <prvInitialiseTaskLists+0x78>)
 8005ab4:	4a05      	ldr	r2, [pc, #20]	@ (8005acc <prvInitialiseTaskLists+0x64>)
 8005ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <prvInitialiseTaskLists+0x7c>)
 8005aba:	4a05      	ldr	r2, [pc, #20]	@ (8005ad0 <prvInitialiseTaskLists+0x68>)
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000448 	.word	0x20000448
 8005acc:	200004d4 	.word	0x200004d4
 8005ad0:	200004e8 	.word	0x200004e8
 8005ad4:	20000504 	.word	0x20000504
 8005ad8:	20000518 	.word	0x20000518
 8005adc:	20000530 	.word	0x20000530
 8005ae0:	200004fc 	.word	0x200004fc
 8005ae4:	20000500 	.word	0x20000500

08005ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aee:	e019      	b.n	8005b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005af0:	f000 fa12 	bl	8005f18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005af4:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <prvCheckTasksWaitingTermination+0x50>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fb82 	bl	800520a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <prvCheckTasksWaitingTermination+0x54>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b3c <prvCheckTasksWaitingTermination+0x54>)
 8005b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b10:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4a0a      	ldr	r2, [pc, #40]	@ (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b1a:	f000 fa2f 	bl	8005f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f810 	bl	8005b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b24:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e1      	bne.n	8005af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000518 	.word	0x20000518
 8005b3c:	20000544 	.word	0x20000544
 8005b40:	2000052c 	.word	0x2000052c

08005b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fb84 	bl	8006268 <vPortFree>
				vPortFree( pxTCB );
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb81 	bl	8006268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b66:	e019      	b.n	8005b9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d103      	bne.n	8005b7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fb78 	bl	8006268 <vPortFree>
	}
 8005b78:	e010      	b.n	8005b9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d00b      	beq.n	8005b9c <prvDeleteTCB+0x58>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <prvDeleteTCB+0x54>
	}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005baa:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <prvResetNextTaskUnblockTime+0x44>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <prvResetNextTaskUnblockTime+0x14>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <prvResetNextTaskUnblockTime+0x16>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <prvResetNextTaskUnblockTime+0x48>)
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bc6:	e008      	b.n	8005bda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bc8:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <prvResetNextTaskUnblockTime+0x44>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4a05      	ldr	r2, [pc, #20]	@ (8005bec <prvResetNextTaskUnblockTime+0x48>)
 8005bd8:	6013      	str	r3, [r2, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	200004fc 	.word	0x200004fc
 8005bec:	20000564 	.word	0x20000564

08005bf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bfa:	4b29      	ldr	r3, [pc, #164]	@ (8005ca0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c00:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff faff 	bl	800520a <uxListRemove>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c12:	4b24      	ldr	r3, [pc, #144]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	2201      	movs	r2, #1
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4013      	ands	r3, r2
 8005c26:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d10a      	bne.n	8005c48 <prvAddCurrentTaskToDelayedList+0x58>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	481a      	ldr	r0, [pc, #104]	@ (8005cac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c42:	f7ff fa85 	bl	8005150 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c46:	e026      	b.n	8005c96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c50:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d209      	bcs.n	8005c74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c60:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7ff fa93 	bl	8005198 <vListInsert>
}
 8005c72:	e010      	b.n	8005c96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7ff fa89 	bl	8005198 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c86:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d202      	bcs.n	8005c96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c90:	4a09      	ldr	r2, [pc, #36]	@ (8005cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6013      	str	r3, [r2, #0]
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000548 	.word	0x20000548
 8005ca4:	20000444 	.word	0x20000444
 8005ca8:	2000054c 	.word	0x2000054c
 8005cac:	20000530 	.word	0x20000530
 8005cb0:	20000500 	.word	0x20000500
 8005cb4:	200004fc 	.word	0x200004fc
 8005cb8:	20000564 	.word	0x20000564

08005cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cec:	4a0c      	ldr	r2, [pc, #48]	@ (8005d20 <pxPortInitialiseStack+0x64>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b14      	subs	r3, #20
 8005cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f06f 0202 	mvn.w	r2, #2
 8005d0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b20      	subs	r3, #32
 8005d10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d12:	68fb      	ldr	r3, [r7, #12]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	08005d25 	.word	0x08005d25

08005d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d2e:	4b13      	ldr	r3, [pc, #76]	@ (8005d7c <prvTaskExitError+0x58>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d00b      	beq.n	8005d50 <prvTaskExitError+0x2c>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <prvTaskExitError+0x28>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60bb      	str	r3, [r7, #8]
}
 8005d62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d64:	bf00      	nop
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0fc      	beq.n	8005d66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000010 	.word	0x20000010

08005d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <pxCurrentTCBConst2>)
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	6808      	ldr	r0, [r1, #0]
 8005d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	f380 8809 	msr	PSP, r0
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	4770      	bx	lr
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst2>:
 8005da0:	20000444 	.word	0x20000444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005da8:	4808      	ldr	r0, [pc, #32]	@ (8005dcc <prvPortStartFirstTask+0x24>)
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f380 8808 	msr	MSP, r0
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8814 	msr	CONTROL, r0
 8005dba:	b662      	cpsie	i
 8005dbc:	b661      	cpsie	f
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	df00      	svc	0
 8005dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dca:	bf00      	nop
 8005dcc:	e000ed08 	.word	0xe000ed08

08005dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005dd6:	4b47      	ldr	r3, [pc, #284]	@ (8005ef4 <xPortStartScheduler+0x124>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a47      	ldr	r2, [pc, #284]	@ (8005ef8 <xPortStartScheduler+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10b      	bne.n	8005df8 <xPortStartScheduler+0x28>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005df8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef4 <xPortStartScheduler+0x124>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8005efc <xPortStartScheduler+0x12c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10b      	bne.n	8005e1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60fb      	str	r3, [r7, #12]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e1a:	4b39      	ldr	r3, [pc, #228]	@ (8005f00 <xPortStartScheduler+0x130>)
 8005e1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	22ff      	movs	r2, #255	@ 0xff
 8005e2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <xPortStartScheduler+0x134>)
 8005e40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e42:	4b31      	ldr	r3, [pc, #196]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e44:	2207      	movs	r2, #7
 8005e46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e48:	e009      	b.n	8005e5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	4a2d      	ldr	r2, [pc, #180]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b80      	cmp	r3, #128	@ 0x80
 8005e68:	d0ef      	beq.n	8005e4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e6a:	4b27      	ldr	r3, [pc, #156]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1c3 0307 	rsb	r3, r3, #7
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d00b      	beq.n	8005e8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ea0:	4a19      	ldr	r2, [pc, #100]	@ (8005f08 <xPortStartScheduler+0x138>)
 8005ea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eac:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <xPortStartScheduler+0x13c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <xPortStartScheduler+0x13c>)
 8005eb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005eb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eb8:	4b14      	ldr	r3, [pc, #80]	@ (8005f0c <xPortStartScheduler+0x13c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a13      	ldr	r2, [pc, #76]	@ (8005f0c <xPortStartScheduler+0x13c>)
 8005ebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ec4:	f000 f8da 	bl	800607c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ec8:	4b11      	ldr	r3, [pc, #68]	@ (8005f10 <xPortStartScheduler+0x140>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ece:	f000 f8f9 	bl	80060c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ed2:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <xPortStartScheduler+0x144>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f14 <xPortStartScheduler+0x144>)
 8005ed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005edc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ede:	f7ff ff63 	bl	8005da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ee2:	f7ff fd4d 	bl	8005980 <vTaskSwitchContext>
	prvTaskExitError();
 8005ee6:	f7ff ff1d 	bl	8005d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	e000ed00 	.word	0xe000ed00
 8005ef8:	410fc271 	.word	0x410fc271
 8005efc:	410fc270 	.word	0x410fc270
 8005f00:	e000e400 	.word	0xe000e400
 8005f04:	20000570 	.word	0x20000570
 8005f08:	20000574 	.word	0x20000574
 8005f0c:	e000ed20 	.word	0xe000ed20
 8005f10:	20000010 	.word	0x20000010
 8005f14:	e000ef34 	.word	0xe000ef34

08005f18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f32:	4b10      	ldr	r3, [pc, #64]	@ (8005f74 <vPortEnterCritical+0x5c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	4a0e      	ldr	r2, [pc, #56]	@ (8005f74 <vPortEnterCritical+0x5c>)
 8005f3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <vPortEnterCritical+0x5c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d110      	bne.n	8005f66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <vPortEnterCritical+0x60>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	603b      	str	r3, [r7, #0]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <vPortEnterCritical+0x4a>
	}
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f82:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <vPortExitCritical+0x50>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <vPortExitCritical+0x26>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	607b      	str	r3, [r7, #4]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <vPortExitCritical+0x50>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4a08      	ldr	r2, [pc, #32]	@ (8005fcc <vPortExitCritical+0x50>)
 8005faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fac:	4b07      	ldr	r3, [pc, #28]	@ (8005fcc <vPortExitCritical+0x50>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <vPortExitCritical+0x44>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000010 	.word	0x20000010

08005fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fd0:	f3ef 8009 	mrs	r0, PSP
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <pxCurrentTCBConst>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f01e 0f10 	tst.w	lr, #16
 8005fe0:	bf08      	it	eq
 8005fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ff4:	f380 8811 	msr	BASEPRI, r0
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f7ff fcbe 	bl	8005980 <vTaskSwitchContext>
 8006004:	f04f 0000 	mov.w	r0, #0
 8006008:	f380 8811 	msr	BASEPRI, r0
 800600c:	bc09      	pop	{r0, r3}
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	6808      	ldr	r0, [r1, #0]
 8006012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006016:	f01e 0f10 	tst.w	lr, #16
 800601a:	bf08      	it	eq
 800601c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006020:	f380 8809 	msr	PSP, r0
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst>:
 8006030:	20000444 	.word	0x20000444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006052:	f7ff fbd7 	bl	8005804 <xTaskIncrementTick>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <SysTick_Handler+0x40>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <vPortSetupTimerInterrupt+0x34>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006086:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <vPortSetupTimerInterrupt+0x38>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800608c:	4b0a      	ldr	r3, [pc, #40]	@ (80060b8 <vPortSetupTimerInterrupt+0x3c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0a      	ldr	r2, [pc, #40]	@ (80060bc <vPortSetupTimerInterrupt+0x40>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <vPortSetupTimerInterrupt+0x44>)
 800609a:	3b01      	subs	r3, #1
 800609c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800609e:	4b04      	ldr	r3, [pc, #16]	@ (80060b0 <vPortSetupTimerInterrupt+0x34>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	e000e010 	.word	0xe000e010
 80060b4:	e000e018 	.word	0xe000e018
 80060b8:	20000004 	.word	0x20000004
 80060bc:	10624dd3 	.word	0x10624dd3
 80060c0:	e000e014 	.word	0xe000e014

080060c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060d4 <vPortEnableVFP+0x10>
 80060c8:	6801      	ldr	r1, [r0, #0]
 80060ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060ce:	6001      	str	r1, [r0, #0]
 80060d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060d2:	bf00      	nop
 80060d4:	e000ed88 	.word	0xe000ed88

080060d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060e4:	f7ff fae2 	bl	80056ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <pvPortMalloc+0x17c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060f0:	f000 f916 	bl	8006320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060f4:	4b58      	ldr	r3, [pc, #352]	@ (8006258 <pvPortMalloc+0x180>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 8090 	bne.w	8006222 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01e      	beq.n	8006146 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006108:	2208      	movs	r2, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4413      	add	r3, r2
 800610e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	2b00      	cmp	r3, #0
 8006118:	d015      	beq.n	8006146 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	3308      	adds	r3, #8
 8006122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <pvPortMalloc+0x6e>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	617b      	str	r3, [r7, #20]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d06a      	beq.n	8006222 <pvPortMalloc+0x14a>
 800614c:	4b43      	ldr	r3, [pc, #268]	@ (800625c <pvPortMalloc+0x184>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d865      	bhi.n	8006222 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006156:	4b42      	ldr	r3, [pc, #264]	@ (8006260 <pvPortMalloc+0x188>)
 8006158:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800615a:	4b41      	ldr	r3, [pc, #260]	@ (8006260 <pvPortMalloc+0x188>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006160:	e004      	b.n	800616c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d903      	bls.n	800617e <pvPortMalloc+0xa6>
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f1      	bne.n	8006162 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800617e:	4b35      	ldr	r3, [pc, #212]	@ (8006254 <pvPortMalloc+0x17c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	429a      	cmp	r2, r3
 8006186:	d04c      	beq.n	8006222 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	4413      	add	r3, r2
 8006190:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1ad2      	subs	r2, r2, r3
 80061a2:	2308      	movs	r3, #8
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d920      	bls.n	80061ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4413      	add	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <pvPortMalloc+0xfc>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	613b      	str	r3, [r7, #16]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061e6:	69b8      	ldr	r0, [r7, #24]
 80061e8:	f000 f8fc 	bl	80063e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <pvPortMalloc+0x184>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	4a19      	ldr	r2, [pc, #100]	@ (800625c <pvPortMalloc+0x184>)
 80061f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061fa:	4b18      	ldr	r3, [pc, #96]	@ (800625c <pvPortMalloc+0x184>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <pvPortMalloc+0x18c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d203      	bcs.n	800620e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <pvPortMalloc+0x184>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <pvPortMalloc+0x18c>)
 800620c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <pvPortMalloc+0x180>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	431a      	orrs	r2, r3
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006222:	f7ff fa51 	bl	80056c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <pvPortMalloc+0x170>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <pvPortMalloc+0x16c>
	return pvReturn;
 8006248:	69fb      	ldr	r3, [r7, #28]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3728      	adds	r7, #40	@ 0x28
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20001180 	.word	0x20001180
 8006258:	2000118c 	.word	0x2000118c
 800625c:	20001184 	.word	0x20001184
 8006260:	20001178 	.word	0x20001178
 8006264:	20001188 	.word	0x20001188

08006268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04a      	beq.n	8006310 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800627a:	2308      	movs	r3, #8
 800627c:	425b      	negs	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4b22      	ldr	r3, [pc, #136]	@ (8006318 <vPortFree+0xb0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <vPortFree+0x46>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <vPortFree+0x66>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4b11      	ldr	r3, [pc, #68]	@ (8006318 <vPortFree+0xb0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d019      	beq.n	8006310 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <vPortFree+0xb0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062f4:	f7ff f9da 	bl	80056ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4b07      	ldr	r3, [pc, #28]	@ (800631c <vPortFree+0xb4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4413      	add	r3, r2
 8006302:	4a06      	ldr	r2, [pc, #24]	@ (800631c <vPortFree+0xb4>)
 8006304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f000 f86c 	bl	80063e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800630c:	f7ff f9dc 	bl	80056c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2000118c 	.word	0x2000118c
 800631c:	20001184 	.word	0x20001184

08006320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006326:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800632a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800632c:	4b27      	ldr	r3, [pc, #156]	@ (80063cc <prvHeapInit+0xac>)
 800632e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3307      	adds	r3, #7
 800633e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	4a1f      	ldr	r2, [pc, #124]	@ (80063cc <prvHeapInit+0xac>)
 8006350:	4413      	add	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <prvHeapInit+0xb0>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800635e:	4b1c      	ldr	r3, [pc, #112]	@ (80063d0 <prvHeapInit+0xb0>)
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800636c:	2208      	movs	r2, #8
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <prvHeapInit+0xb4>)
 8006380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006382:	4b14      	ldr	r3, [pc, #80]	@ (80063d4 <prvHeapInit+0xb4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800638a:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <prvHeapInit+0xb4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <prvHeapInit+0xb4>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a0a      	ldr	r2, [pc, #40]	@ (80063d8 <prvHeapInit+0xb8>)
 80063ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a09      	ldr	r2, [pc, #36]	@ (80063dc <prvHeapInit+0xbc>)
 80063b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063b8:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <prvHeapInit+0xc0>)
 80063ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063be:	601a      	str	r2, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20000578 	.word	0x20000578
 80063d0:	20001178 	.word	0x20001178
 80063d4:	20001180 	.word	0x20001180
 80063d8:	20001188 	.word	0x20001188
 80063dc:	20001184 	.word	0x20001184
 80063e0:	2000118c 	.word	0x2000118c

080063e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063ec:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <prvInsertBlockIntoFreeList+0xac>)
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e002      	b.n	80063f8 <prvInsertBlockIntoFreeList+0x14>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d8f7      	bhi.n	80063f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d108      	bne.n	8006426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d118      	bne.n	800646c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <prvInsertBlockIntoFreeList+0xb0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d00d      	beq.n	8006462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e008      	b.n	8006474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <prvInsertBlockIntoFreeList+0xb0>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e003      	b.n	8006474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d002      	beq.n	8006482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20001178 	.word	0x20001178
 8006494:	20001180 	.word	0x20001180

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4d0d      	ldr	r5, [pc, #52]	@ (80064e0 <__libc_init_array+0x38>)
 80064ac:	4c0d      	ldr	r4, [pc, #52]	@ (80064e4 <__libc_init_array+0x3c>)
 80064ae:	1b64      	subs	r4, r4, r5
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	2600      	movs	r6, #0
 80064b4:	42a6      	cmp	r6, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	4d0b      	ldr	r5, [pc, #44]	@ (80064e8 <__libc_init_array+0x40>)
 80064ba:	4c0c      	ldr	r4, [pc, #48]	@ (80064ec <__libc_init_array+0x44>)
 80064bc:	f000 f818 	bl	80064f0 <_init>
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	2600      	movs	r6, #0
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d0:	4798      	blx	r3
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064da:	4798      	blx	r3
 80064dc:	3601      	adds	r6, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	080065f8 	.word	0x080065f8
 80064e4:	080065f8 	.word	0x080065f8
 80064e8:	080065f8 	.word	0x080065f8
 80064ec:	080065fc 	.word	0x080065fc

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
